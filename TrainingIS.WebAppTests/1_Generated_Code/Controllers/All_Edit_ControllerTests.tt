<#@ template language="C#" debug="true"   hostspecific="true"#>
<#@ CleanupBehavior processor="T4VSHost" CleanupAfterProcessingtemplate="true" #>  
<#@ output extension=".cs"#> 
<#@ include file="..\Lib\Imports.include.t4" #>
<#@ include file="..\Lib\lib.ttinclude" #> 
<#   
	// Create file for All Entities
	var manager = TemplateFileManager.Create(this);  
	List<Type> Entities = Edit_Controller_Tests<TrainingISModel>.GetEntitiesTypes();
	foreach(Type entityType in Entities)
    {    
		Edit_Controller_Tests<TrainingISModel> Generator = new Edit_Controller_Tests<TrainingISModel>(entityType,new TrainingIS.BLL.Services.GAppDevContext()); 
		var Code = Generator.Code;
		manager.StartNewFile(Code.FileName);
#>using Microsoft.VisualStudio.TestTools.UnitTesting;
using TrainingIS.WebApp.Controllers;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Web.Mvc;
using TrainingIS.Entities;
using AutoFixture;
using TrainingIS.BLL;
using TrainingIS.DAL;
using TrainingIS.WebApp.Tests.ViewModels;
using System.ComponentModel.DataAnnotations;
using TrainingIS.WebApp.Helpers.AlertMessages;
using GApp.WebApp.Tests;
using GApp.WebApp.Manager.Views;
using TrainingIS.WebApp.Tests.TestUtilities;
<# foreach (var name_space in Code.Expcected_NameSpaces) { #>
using <#= name_space #>;
<#}#>
using TrainingIS.BLL.ModelsViews;

namespace TrainingIS.WebApp.Controllers.Tests
{
    [TestClass()]
    public class <#=Code.ClassName#> : ManagerControllerTests
    {
		<#=entityType.Name.Pluralize()#>ControllerTests_Service TestService = new <#=entityType.Name.Pluralize()#>ControllerTests_Service();

		[TestMethod()]
        public void EditGet_<#=entityType.Name#>_Not_Exist_Test()
        {
            // Arrange
            <#=entityType.Name.Pluralize()#>Controller controller = new <#=entityType.Name.Pluralize()#>Controller();

            // Acte
            var result = controller.Edit(-1) as RedirectToRouteResult;

            // Assert 
            Assert.AreEqual("Index", result.RouteValues["action"]);
            Assert.IsTrue(controller.TempData.ContainsKey("notification"));
            var notification = controller.TempData["notification"] as AlertMessage;
            Assert.IsTrue(notification.notificationType == Enums.Enums.NotificationType.error);
        }
        [TestMethod()]
        public void EditGet_<#=entityType.Name#>_Test()
        {
            // Arrange
            <#=entityType.Name.Pluralize()#>Controller controller = new <#=entityType.Name.Pluralize()#>Controller();
            <#=entityType.Name#> <#=entityType.Name.ToLower()#> =  TestService.CreateOrLouadFirst<#=entityType.Name#>(controller._UnitOfWork);

            // Acte
            var result = controller.Edit(<#=entityType.Name.ToLower()#>.Id) as ViewResult;
            var <#=entityType.Name#>DetailModelView = result.Model;

            // Assert 
			Assert.IsInstanceOfType(<#=entityType.Name#>DetailModelView, typeof(<#= Generator.Models.EditModelType.Name #>));
        }

        [TestMethod()]
        public void Edit_Valide_<#=entityType.Name#>_Post_Test()
        {

            // Arrange
            <#=entityType.Name.Pluralize()#>Controller controller = new <#=entityType.Name.Pluralize()#>Controller();
			// controller.SetFakeControllerContext();
            
			// Load existant entity in new Work, to be detached from the the controller work
            <#=entityType.Name#> <#=entityType.Name.ToLower()#> = TestService.CreateOrLouadFirst<#=entityType.Name#>(new UnitOfWork());
			 
       

            // Acte
            <#=entityType.Name.Pluralize()#>ControllerTests_Service.PreBindModel(controller, <#=entityType.Name.ToLower()#>, nameof(<#=entityType.Name.Pluralize()#>Controller.Edit));
            <#=entityType.Name.Pluralize()#>ControllerTests_Service.ValidateViewModel(controller, <#=entityType.Name.ToLower()#>);

			<#= Generator.Models.EditModelType.Name #> <#= Generator.Models.EditModelType.Name #> = new <#= Generator.Models.EditModelType.Name #>BLM(controller._UnitOfWork).ConverTo_<#= Generator.Models.EditModelType.Name #>(<#=entityType.Name.ToLower()#>);
            var result = controller.Edit(<#= Generator.Models.EditModelType.Name #>);



            RedirectToRouteResult redirectResult = result as RedirectToRouteResult;

            Assert.IsNotNull(redirectResult);
            Assert.AreEqual("Index", redirectResult.RouteValues["action"]);
            Assert.IsTrue(controller.TempData.ContainsKey("notification"));
            var notification = controller.TempData["notification"] as AlertMessage;
            Assert.IsTrue(notification.notificationType == Enums.Enums.NotificationType.success);
        }

        [TestMethod()]
        public void Edit_InValide_<#=entityType.Name#>_Post_Test()
        {
            // Arrange
            <#=entityType.Name.Pluralize()#>Controller controller = new <#=entityType.Name.Pluralize()#>Controller();
            <#=entityType.Name#> <#=entityType.Name.ToLower()#> = TestService.CreateInValide<#=entityType.Name#>Instance_ForEdit(new UnitOfWork());
            if (<#=entityType.Name.ToLower()#> == null) return;
            <#=entityType.Name#>BLO <#=entityType.Name.ToLower()#>BLO = new <#=entityType.Name#>BLO(controller._UnitOfWork);

            // Acte
            <#=entityType.Name.Pluralize()#>ControllerTests_Service.PreBindModel(controller, <#=entityType.Name.ToLower()#>, nameof(<#=entityType.Name.Pluralize()#>Controller.Edit));
            List<ValidationResult> ls_validation_errors = <#=entityType.Name.Pluralize()#>ControllerTests_Service
                .ValidateViewModel(controller, <#=entityType.Name.ToLower()#>);

			<#= Generator.Models.EditModelType.Name #> <#= Generator.Models.EditModelType.Name #> = new <#= Generator.Models.EditModelType.Name #>BLM(controller._UnitOfWork).ConverTo_<#= Generator.Models.EditModelType.Name #>(<#=entityType.Name.ToLower()#>);
            var result = controller.Edit(<#= Generator.Models.EditModelType.Name #>);
 

            ViewResult resultViewResult = result as ViewResult;
            var GAppErrors = <#=entityType.Name.ToLower()#>BLO.Validate(<#=entityType.Name.ToLower()#>);
            int Exprected_Errors_Number = ls_validation_errors.Count + ((GAppErrors == null) ? 0 : GAppErrors.Count);

            // Assert 
            Assert.AreEqual(Exprected_Errors_Number, controller.ModelState.Count);
            Assert.IsTrue(resultViewResult.TempData.ContainsKey("notification"));
            var notification = resultViewResult.TempData["notification"] as AlertMessage;
            Assert.IsTrue(notification.notificationType == Enums.Enums.NotificationType.warning);
        }
    }
}

<#
} // for
manager.Process();
#>