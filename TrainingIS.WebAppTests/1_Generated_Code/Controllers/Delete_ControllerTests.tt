<#@ template language="C#" debug="true"   hostspecific="true"#>
<#@ CleanupBehavior processor="T4VSHost" CleanupAfterProcessingtemplate="true" #>  
<#@ output extension=".cs"#> 
<#@ include file="..\Lib\Imports.include.t4" #>
<#@ include file="..\Lib\lib.ttinclude" #> 
<#    
	// Create file for All Entities
	var manager = TemplateFileManager.Create(this);  
	List<Type> Entities = Delete_Controller_Tests<TrainingISModel>.GetEntitiesTypes();
	foreach(Type entityType in Entities)
    {    
		Delete_Controller_Tests<TrainingISModel> Generator = new Delete_Controller_Tests<TrainingISModel>(entityType,new TrainingIS.Models.GAppDevContext()); 
		var Code = Generator.Code;
		manager.StartNewFile(Code.FileName); 
#>using Microsoft.VisualStudio.TestTools.UnitTesting;
using TrainingIS.WebApp.Controllers;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Web.Mvc;
using TrainingIS.Entities;
using AutoFixture;
using TrainingIS.BLL;
using TrainingIS.DAL;
using TrainingIS.WebApp.Tests.ViewModels;
using System.ComponentModel.DataAnnotations;
using GApp.WebApp.Tests;
using GApp.WebApp.Manager.Views;
using TrainingIS.WebApp.Tests.TestUtilities;
using GApp.Entities;
using GApp.BLL.Enums;
using GApp.BLL.VO;
using GApp.DAL;
using TrainingIS.WebApp.Tests.Services;
<# foreach (var name_space in Code.Expcected_NameSpaces) { #>
using <#= name_space #>;
<#}#>
using TrainingIS.BLL.ModelsViews;

namespace TrainingIS.WebApp.Controllers.Tests
{ 
    [TestClass()]
    public class <#=Code.ClassName#> : ManagerControllerTests
    {
		<#=entityType.Name.Pluralize()#>ControllerTests_Service TestService = new <#=entityType.Name.Pluralize()#>ControllerTests_Service();

		[TestMethod()]
        public void <#=Code.ClassName#>_Test()
        {
            // Arrange
            <#=entityType.Name.Pluralize()#>Controller controller = new <#=entityType.Name.Pluralize()#>Controller();
            <#=entityType.Name#> <#=entityType.Name.ToLower()#> = TestService.CreateOrLouadFirst<#=entityType.Name#>(controller._UnitOfWork,controller.GAppContext);

            // Acte
            var result = controller.Delete(<#=entityType.Name.ToLower()#>.Id) as ViewResult;
            var <#=entityType.Name#>DetailModelView = result.Model;

            // Assert 
			Assert.IsInstanceOfType(<#=entityType.Name#>DetailModelView, typeof(<#= Generator.Models.DetailsModelType.Name #>));
        }

        [TestMethod()]
        public void Delete_<#=entityType.Name#>_Post_Test()
        {
            // Arrange
            //
            // Create <#=entityType.Name#> to Delete
			            <#=entityType.Name.Pluralize()#>Controller controller = new <#=entityType.Name.Pluralize()#>Controller();
            <#=entityType.Name#> <#=entityType.Name.ToLower()#>_to_delete = TestService.CreateValide<#=entityType.Name#>Instance(controller._UnitOfWork,controller.GAppContext);
            <#=entityType.Name#>BLO <#=entityType.Name.ToLower()#>BLO = new <#=entityType.Name#>BLO(new UnitOfWork<TrainingISModel>(),controller.GAppContext);
            <#=entityType.Name.ToLower()#>BLO.Save(<#=entityType.Name.ToLower()#>_to_delete);


            // Acte
            var result = controller.DeleteConfirmed(<#=entityType.Name.ToLower()#>_to_delete.Id);
            RedirectToRouteResult redirectResult = result as RedirectToRouteResult;

            Assert.IsNotNull(redirectResult);
            Assert.AreEqual("Index", redirectResult.RouteValues["action"]);
            Assert.IsTrue(controller.TempData.ContainsKey("notification"));
            var notification = controller.TempData["notification"] as AlertMessage;
            Assert.IsTrue(notification.notificationType == NotificationType.success);
        }
        [TestMethod()]
        public void Delete_Existtant_<#=entityType.Name#>_Test()
        {
            // Arrange
            <#=entityType.Name.Pluralize()#>Controller controller = new <#=entityType.Name.Pluralize()#>Controller();

            // Acte 
            var result = controller.DeleteConfirmed(-1) as RedirectToRouteResult;

            // Assert 
            Assert.AreEqual("Index", result.RouteValues["action"]);
            Assert.IsTrue(controller.TempData.ContainsKey("notification"));
            var notification = controller.TempData["notification"] as AlertMessage;
            Assert.IsTrue(notification.notificationType == NotificationType.error);
        } 
    }
}

<#
} // for
manager.Process();
#>