<#@ template language="C#" debug="true"   hostspecific="true"#>
<#@ CleanupBehavior processor="T4VSHost" CleanupAfterProcessingtemplate="true" #>  
<#@ output extension=".cs"#> 
<#@ include file="..\Lib\Imports.include.t4" #>
<#@ include file="..\Lib\lib.ttinclude" #> 
<#   
	// Create file for All Entities
	var manager = TemplateFileManager.Create(this);  
	List<Type> Entities = Create_Controller_Tests<TrainingISModel>.GetEntitiesTypes();
	foreach(Type entityType in Entities)
    {    
		Create_Controller_Tests<TrainingISModel> Generator = new Create_Controller_Tests<TrainingISModel>(entityType,new TrainingIS.Models.GAppDevContext()); 
		var Code = Generator.Code;
		manager.StartNewFile(Code.FileName);
#>
using Microsoft.VisualStudio.TestTools.UnitTesting;
using TrainingIS.WebApp.Controllers;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Web.Mvc;
using TrainingIS.Entities;
using AutoFixture;
using TrainingIS.BLL;
using TrainingIS.DAL;
using TrainingIS.WebApp.Tests.ViewModels;
using System.ComponentModel.DataAnnotations;
using GApp.WebApp.Tests;
using GApp.WebApp.Manager.Views;
using TrainingIS.WebApp.Tests.TestUtilities;
using TrainingIS.BLL.ModelsViews;
using GApp.Entities;
using GApp.BLL.VO;
using GApp.BLL.Enums;
using TrainingIS.WebApp.Tests.Services;
<# foreach (var name_space in Code.Expcected_NameSpaces) { #>
using <#= name_space #>;
<#}#>


namespace TrainingIS.WebApp.Controllers.Tests
{
    [TestClass()]
    public class Create_<#=entityType.Name.Pluralize()#>ControllerTests : ManagerControllerTests
    {
		<#=entityType.Name.Pluralize()#>ControllerTests_Service TestService = new <#=entityType.Name.Pluralize()#>ControllerTests_Service();

		[TestMethod()]
        public void Create_ViewResult_Test()
        {
            //Arrange
            <#=entityType.Name.Pluralize()#>Controller <#=entityType.Name.Pluralize()#>Controller = new <#=entityType.Name.Pluralize()#>Controller();

            ViewResult viewResult = <#=entityType.Name.Pluralize()#>Controller.Create() as ViewResult;

            //Asert ViewResult
            Assert.IsNotNull(viewResult.ViewName);

            // Asert ViewData/ ViewBag
            Assert.IsTrue(!string.IsNullOrEmpty(viewResult.ViewBag.msg["Create_Title"]));
        }

        [TestMethod()]
        public void Create_Valide_<#=entityType.Name#>_Post_Test()
        {
            //--Arrange--
            <#=entityType.Name.Pluralize()#>Controller controller = new <#=entityType.Name.Pluralize()#>Controller();
            <#=entityType.Name#> <#=entityType.Name.ToLower()#> = TestService.CreateValide<#=entityType.Name#>Instance(controller._UnitOfWork,controller.GAppContext);

            //--Acte--
            //
            <#=entityType.Name.Pluralize()#>ControllerTests_Service.PreBindModel(controller, <#=entityType.Name.ToLower()#>, nameof(<#=entityType.Name.Pluralize()#>Controller.Create));
            <#=entityType.Name.Pluralize()#>ControllerTests_Service.ValidateViewModel(controller,<#=entityType.Name.ToLower()#>);

			<#= Generator.Models.CreateModelType.Name #> <#= Generator.Models.CreateModelType.Name #> = new <#= Generator.Models.CreateModelType.Name #>BLM(controller._UnitOfWork, controller.GAppContext) .ConverTo_<#= Generator.Models.CreateModelType.Name #>(<#=entityType.Name.ToLower()#>);
            var result = controller.Create(<#= Generator.Models.CreateModelType.Name #>);
            RedirectToRouteResult redirectResult = result as RedirectToRouteResult;

            // [ToDo] Verify Binding Include with GAppDisplayAttribute.BindCreate 

            //--Assert--
            Assert.IsNotNull(redirectResult);
            Assert.AreEqual("Index", redirectResult.RouteValues["action"]);
            Assert.IsTrue(controller.TempData.ContainsKey("notification"));
            var notification = controller.TempData["notification"] as AlertMessage;
            Assert.IsTrue(notification.notificationType == NotificationType.success);
        }

        [TestMethod()]
        public void Create_InValide_<#=entityType.Name#>_Post_Test()
        {
            // Arrange
            <#=entityType.Name.Pluralize()#>Controller controller = new <#=entityType.Name.Pluralize()#>Controller();
            <#=entityType.Name#> <#=entityType.Name.ToLower()#> = TestService.CreateInValide<#=entityType.Name#>Instance(controller._UnitOfWork,controller.GAppContext);
            if (<#=entityType.Name.ToLower()#> == null) return;
            <#=entityType.Name#>BLO <#=entityType.Name.ToLower()#>BLO = new <#=entityType.Name#>BLO(controller._UnitOfWork, controller.GAppContext) ;

            // Acte
            <#=entityType.Name.Pluralize()#>ControllerTests_Service.PreBindModel(controller, <#=entityType.Name.ToLower()#>, nameof(<#=entityType.Name.Pluralize()#>Controller.Create));
            List<ValidationResult>  ls_validation_errors = <#=entityType.Name.Pluralize()#>ControllerTests_Service
                .ValidateViewModel(controller, <#=entityType.Name.ToLower()#>);

			// stop test if the InValide entity is valide
            if (ls_validation_errors.Count == 0) return;

			<#= Generator.Models.CreateModelType.Name #> <#= Generator.Models.CreateModelType.Name #> = new <#= Generator.Models.CreateModelType.Name #>BLM(controller._UnitOfWork, controller.GAppContext) .ConverTo_<#= Generator.Models.CreateModelType.Name #>(<#=entityType.Name.ToLower()#>);
            var result = controller.Create(<#= Generator.Models.CreateModelType.Name #>);

            ViewResult resultViewResult = result as ViewResult;
            var GAppErrors = <#=entityType.Name.ToLower()#>BLO.Validate(<#=entityType.Name.ToLower()#>);
            int Exprected_Errors_Number = ls_validation_errors.Count + ((GAppErrors == null)? 0: GAppErrors.Count);

            // Assert 
            Assert.AreEqual(Exprected_Errors_Number, controller.ModelState.Count);
            Assert.IsTrue(resultViewResult.TempData.ContainsKey("notification"));
            var notification = resultViewResult.TempData["notification"] as AlertMessage;
            Assert.IsTrue(notification.notificationType == NotificationType.warning);
        }
    }
}

<#
} // for
manager.Process();
#>