<#+ 
  void Delete_Tests(Type entityType){			
		#>
       [TestMethod()]
        public void Delete_<#=entityType.Name#>_Test()
        {
            // Init 
            ModelViewMetaData modelViewMetaData = new ModelViewMetaData(typeof(<#=entityType.Name#>));
			 
            // Arrange
            <#=entityType.Name.Pluralize()#>Controller controller = new <#=entityType.Name.Pluralize()#>Controller();
            <#=entityType.Name#> <#=entityType.Name.ToLower()#> = this.CreateOrLouadFirst<#=entityType.Name#>(controller._UnitOfWork);

            // Acte
            var result = controller.Delete(<#=entityType.Name.ToLower()#>.Id) as ViewResult;
            var <#=entityType.Name#>DetailModelView = result.Model;

            // Assert 
            if (modelViewMetaData.DetailsViewAttribute?.TypeOfView != null)
                Assert.IsInstanceOfType(<#=entityType.Name#>DetailModelView, modelViewMetaData.DetailsViewAttribute?.TypeOfView);
            else
                Assert.IsInstanceOfType(<#=entityType.Name#>DetailModelView, typeof(<#=entityType.Name#>));
        }

        [TestMethod()]
        public void Delete_<#=entityType.Name#>_Post_Test()
        {
            // Arrange
            //
            // Create <#=entityType.Name#> to Delete
            <#=entityType.Name#> <#=entityType.Name.ToLower()#>_to_delete = this.CreateValide<#=entityType.Name#>Instance();
            <#=entityType.Name#>BLO <#=entityType.Name.ToLower()#>BLO = new <#=entityType.Name#>BLO(new UnitOfWork());
            <#=entityType.Name.ToLower()#>BLO.Save(<#=entityType.Name.ToLower()#>_to_delete);
            <#=entityType.Name.Pluralize()#>Controller controller = new <#=entityType.Name.Pluralize()#>Controller();

            // Acte
            var result = controller.DeleteConfirmed(<#=entityType.Name.ToLower()#>_to_delete.Id);
            RedirectToRouteResult redirectResult = result as RedirectToRouteResult;

            Assert.IsNotNull(redirectResult);
            Assert.AreEqual("Index", redirectResult.RouteValues["action"]);
            Assert.IsTrue(controller.TempData.ContainsKey("notification"));
            var notification = controller.TempData["notification"] as AlertMessage;
            Assert.IsTrue(notification.notificationType == Enums.Enums.NotificationType.success);
        }
        [TestMethod()]
        public void Delete_Existtant_<#=entityType.Name#>_Test()
        {
            // Arrange
            <#=entityType.Name.Pluralize()#>Controller controller = new <#=entityType.Name.Pluralize()#>Controller();

            // Acte
            var result = controller.DeleteConfirmed(-1) as RedirectToRouteResult;

            // Assert 
            Assert.AreEqual("Index", result.RouteValues["action"]);
            Assert.IsTrue(controller.TempData.ContainsKey("notification"));
            var notification = controller.TempData["notification"] as AlertMessage;
            Assert.IsTrue(notification.notificationType == Enums.Enums.NotificationType.error);
        }

		<#+
	}	

void Delete_ModelView_Tests(Type entityType,Type ViewModel_Type,EntityGeneratorWork<TrainingISModel> entityGenWork){			
		#>
       [TestMethod()]
        public void Delete_<#=entityType.Name#>_Test()
        {
            // Init 
            ModelViewMetaData modelViewMetaData = new ModelViewMetaData(typeof(<#=entityType.Name#>));
			 
            // Arrange
            <#=entityType.Name.Pluralize()#>Controller controller = new <#=entityType.Name.Pluralize()#>Controller();
            <#=entityType.Name#> <#=entityType.Name.ToLower()#> = this.CreateOrLouadFirst<#=entityType.Name#>(controller._UnitOfWork);

            // Acte
            var result = controller.Delete(<#=entityType.Name.ToLower()#>.Id) as ViewResult;
            var <#=entityType.Name#>DetailModelView = result.Model;

            // Assert 
            if (modelViewMetaData.DetailsViewAttribute?.TypeOfView != null)
                Assert.IsInstanceOfType(<#=entityType.Name#>DetailModelView, modelViewMetaData.DetailsViewAttribute?.TypeOfView);
            else
                Assert.IsInstanceOfType(<#=entityType.Name#>DetailModelView, typeof(<#=entityType.Name#>));
        }

        [TestMethod()]
        public void Delete_<#=entityType.Name#>_Post_Test()
        {
            // Arrange
            //
            // Create <#=entityType.Name#> to Delete
            <#=entityType.Name#> <#=entityType.Name.ToLower()#>_to_delete = this.CreateValide<#=entityType.Name#>Instance();
            <#=entityType.Name#>BLO <#=entityType.Name.ToLower()#>BLO = new <#=entityType.Name#>BLO(new UnitOfWork());
            <#=entityType.Name.ToLower()#>BLO.Save(<#=entityType.Name.ToLower()#>_to_delete);
            <#=entityType.Name.Pluralize()#>Controller controller = new <#=entityType.Name.Pluralize()#>Controller();

            // Acte
            var result = controller.DeleteConfirmed(<#=entityType.Name.ToLower()#>_to_delete.Id);
            RedirectToRouteResult redirectResult = result as RedirectToRouteResult;

            Assert.IsNotNull(redirectResult);
            Assert.AreEqual("Index", redirectResult.RouteValues["action"]);
            Assert.IsTrue(controller.TempData.ContainsKey("notification"));
            var notification = controller.TempData["notification"] as AlertMessage;
            Assert.IsTrue(notification.notificationType == Enums.Enums.NotificationType.success);
        }
        [TestMethod()]
        public void Delete_Existtant_<#=entityType.Name#>_Test()
        {
            // Arrange
            <#=entityType.Name.Pluralize()#>Controller controller = new <#=entityType.Name.Pluralize()#>Controller();

            // Acte
            var result = controller.DeleteConfirmed(-1) as RedirectToRouteResult;

            // Assert 
            Assert.AreEqual("Index", result.RouteValues["action"]);
            Assert.IsTrue(controller.TempData.ContainsKey("notification"));
            var notification = controller.TempData["notification"] as AlertMessage;
            Assert.IsTrue(notification.notificationType == Enums.Enums.NotificationType.error);
        }

		<#+
	}	
#>