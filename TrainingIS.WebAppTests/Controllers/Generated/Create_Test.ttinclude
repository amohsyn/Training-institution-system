<#+ 
  void Create_Tests(Type entityType){			
		#>
       

		<#+
	}	

void Create_ModelView_Tests(Type entityType,Type ViewModel_Type,EntityGeneratorWork<TrainingISModel> entityGenWork){			
		#>
        [TestMethod()]
        public void Create_ViewResult_ViewBag_Get_Test()
        {
            //Arrange
            <#=entityType.Name.Pluralize()#>Controller <#=entityType.Name.Pluralize()#>Controller = new <#=entityType.Name.Pluralize()#>Controller();

            ViewResult viewResult = <#=entityType.Name.Pluralize()#>Controller.Create() as ViewResult;

            //Asert ViewResult
            Assert.IsNotNull(viewResult.ViewName);

            // Asert ViewData/ ViewBag
            Assert.IsTrue(!string.IsNullOrEmpty(viewResult.ViewBag.msg["Create_Title"]));
        }

        [TestMethod()]
        public void Create_Valide_<#=entityType.Name#>_Post_Test()
        {
            //--Arrange--
            <#=entityType.Name.Pluralize()#>Controller controller = new <#=entityType.Name.Pluralize()#>Controller();
            <#=entityType.Name#> <#=entityType.Name.ToLower()#> = this.CreateValide<#=entityType.Name#>Instance();

            //--Acte--
            //
            <#=entityType.Name.Pluralize()#>ControllerTests.PreBindModel(controller, <#=entityType.Name.ToLower()#>, nameof(<#=entityType.Name.Pluralize()#>Controller.Create));
            <#=entityType.Name.Pluralize()#>ControllerTests.ValidateViewModel(controller,<#=entityType.Name.ToLower()#>);
            var result = controller.Create(<#=entityType.Name.ToLower()#>);
            RedirectToRouteResult redirectResult = result as RedirectToRouteResult;

            // [ToDo] Verify Binding Include with GAppDisplayAttribute.BindCreate 

            //--Assert--
            Assert.IsNotNull(redirectResult);
            Assert.AreEqual("Index", redirectResult.RouteValues["action"]);
            Assert.IsTrue(controller.TempData.ContainsKey("notification"));
            var notification = controller.TempData["notification"] as AlertMessage;
            Assert.IsTrue(notification.notificationType == Enums.Enums.NotificationType.success);
        }

        [TestMethod()]
        public void Create_InValide_<#=entityType.Name#>_Post_Test()
        {
            // Arrange
            <#=entityType.Name.Pluralize()#>Controller controller = new <#=entityType.Name.Pluralize()#>Controller();
            <#=entityType.Name#> <#=entityType.Name.ToLower()#> = this.CreateInValide<#=entityType.Name#>Instance();
            if (<#=entityType.Name.ToLower()#> == null) return;
            <#=entityType.Name#>BLO <#=entityType.Name.ToLower()#>BLO = new <#=entityType.Name#>BLO(controller._UnitOfWork);

            // Acte
            <#=entityType.Name.Pluralize()#>ControllerTests.PreBindModel(controller, <#=entityType.Name.ToLower()#>, nameof(<#=entityType.Name.Pluralize()#>Controller.Create));
            List<ValidationResult>  ls_validation_errors = <#=entityType.Name.Pluralize()#>ControllerTests
                .ValidateViewModel(controller, <#=entityType.Name.ToLower()#>);
            var result = controller.Create(<#=entityType.Name.ToLower()#>);
            ViewResult resultViewResult = result as ViewResult;
            var GAppErrors = <#=entityType.Name.ToLower()#>BLO.Validate(<#=entityType.Name.ToLower()#>);
            int Exprected_Errors_Number = ls_validation_errors.Count + ((GAppErrors == null)? 0: GAppErrors.Count);

            // Assert 
            Assert.AreEqual(Exprected_Errors_Number, controller.ModelState.Count);
            Assert.IsTrue(resultViewResult.TempData.ContainsKey("notification"));
            var notification = resultViewResult.TempData["notification"] as AlertMessage;
            Assert.IsTrue(notification.notificationType == Enums.Enums.NotificationType.error);
        }

		<#+
	}	
#>