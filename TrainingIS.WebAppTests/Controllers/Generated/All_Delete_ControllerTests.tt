<#@ template language="C#" debug="true" hostspecific="true"#>
<#@ output extension=".cs"#>  
<#@ include file="lib.ttinclude" #>   
<#@ assembly name="GAppTemp\bin\Debug\GAppTemp.dll" #> 
<#@ assembly name="TrainningIS.DAL\bin\Debug\TrainingIS.DAL.dll" #>
<#@ assembly name="TrainningIS.DAL\bin\Debug\EntityFramework.dll" #>
<#@ assembly name="TrainningIS.DAL\bin\Debug\EntityFramework.SqlServer.dll" #>
<#@ assembly name="TrainingIS.Entities\bin\Debug\TrainingIS.Entities.dll" #> 
<#@ assembly name="GAppTemp\bin\Debug\GAppTemp.dll" #>  
<#@ import namespace="GApp.WebApp.Manager.Generator" #>    
<#@ import namespace="System.Data.Entity" #>  
<#@ import namespace="TrainingIS.Entities.ModelsViews.Generated" #>
<#@ import namespace="TrainingIS.DAL" #>     
<#       
    EntityService<TrainingISModel> entityService = new EntityService<TrainingISModel>();
	List<Type> Entities = entityService.getAllEntities();

	// Create file for All Entities
	var manager = TemplateFileManager.Create(this);

	foreach(Type entityType in Entities)
    { 
	    manager.StartNewFile("Delete_" +entityType.Name.Pluralize() + "ControllerTests.cs");

		Dictionary<Type, List<Type>> Default_ModelsViewsTypes = new DefaultModelView_MetaData().ModelsViewsTypes;
		Controller_CodeGenerator<TrainingISModel>  controller_CodeGenerator = new Controller_CodeGenerator<TrainingISModel>(entityType, Default_ModelsViewsTypes);
		ModelView_CodeGenerator<TrainingISModel>  modelView_CodeGenerator = new ModelView_CodeGenerator<TrainingISModel>(entityType, Default_ModelsViewsTypes);
		RelationShip_CodeGenerator<TrainingISModel> relationShip_CodeGenerator =  new RelationShip_CodeGenerator<TrainingISModel>(entityType);
		EntityMentaData_CodeGenerator<TrainingISModel> entityMentaData_CodeGenerator = new EntityMentaData_CodeGenerator<TrainingISModel>(entityType);
		CSharp_CodeGenerator<TrainingISModel> CSharp_CodeGenerator = new CSharp_CodeGenerator<TrainingISModel>();

		Type indexViewModel_Type = modelView_CodeGenerator.getIndexModelView_Type(); 
		Type CreateModelView_Type = modelView_CodeGenerator.getCreateModelView_Type(); 
		Type DetailsModelView_Type = modelView_CodeGenerator.getDetailsModelView_Type(); 
		Type EditModelView_Type = modelView_CodeGenerator.getEditModelView_Type(); 

#>
using Microsoft.VisualStudio.TestTools.UnitTesting;
using TrainingIS.WebApp.Controllers;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Web.Mvc;
using TrainingIS.Entities;
using AutoFixture;
using TrainingIS.BLL;
using TrainingIS.DAL;
using TrainingIS.WebApp.Tests.ViewModels;
using System.ComponentModel.DataAnnotations;
using TrainingIS.WebApp.Helpers.AlertMessages;
using GApp.WebApp.Tests;
using GApp.WebApp.Manager.Views;
using TrainingIS.WebApp.Tests.TestUtilities;
<# foreach (var name_space in modelView_CodeGenerator.ModelsViewsNamesSpaces) { #>
using <#= name_space #>;
<#}#>
using TrainingIS.BLL.ModelsViews;

namespace TrainingIS.WebApp.Controllers.Tests
{
    [TestClass()]
    public class Delete_<#=entityType.Name.Pluralize()#>ControllerTests : ManagerControllerTests
    {
		<#=entityType.Name.Pluralize()#>ControllerTests_Service TestService = new <#=entityType.Name.Pluralize()#>ControllerTests_Service();

		[TestMethod()]
        public void Delete_<#=entityType.Name#>_Test()
        {
            // Init 
            ModelViewMetaData modelViewMetaData = new ModelViewMetaData(typeof(<#=entityType.Name#>));
			 
            // Arrange
            <#=entityType.Name.Pluralize()#>Controller controller = new <#=entityType.Name.Pluralize()#>Controller();
            <#=entityType.Name#> <#=entityType.Name.ToLower()#> = TestService.CreateOrLouadFirst<#=entityType.Name#>(controller._UnitOfWork);

            // Acte
            var result = controller.Delete(<#=entityType.Name.ToLower()#>.Id) as ViewResult;
            var <#=entityType.Name#>DetailModelView = result.Model;

            // Assert 
			Assert.IsInstanceOfType(<#=entityType.Name#>DetailModelView, typeof(<#= DetailsModelView_Type.Name #>));
        }

        [TestMethod()]
        public void Delete_<#=entityType.Name#>_Post_Test()
        {
            // Arrange
            //
            // Create <#=entityType.Name#> to Delete
            <#=entityType.Name#> <#=entityType.Name.ToLower()#>_to_delete = TestService.CreateValide<#=entityType.Name#>Instance();
            <#=entityType.Name#>BLO <#=entityType.Name.ToLower()#>BLO = new <#=entityType.Name#>BLO(new UnitOfWork());
            <#=entityType.Name.ToLower()#>BLO.Save(<#=entityType.Name.ToLower()#>_to_delete);
            <#=entityType.Name.Pluralize()#>Controller controller = new <#=entityType.Name.Pluralize()#>Controller();

            // Acte
            var result = controller.DeleteConfirmed(<#=entityType.Name.ToLower()#>_to_delete.Id);
            RedirectToRouteResult redirectResult = result as RedirectToRouteResult;

            Assert.IsNotNull(redirectResult);
            Assert.AreEqual("Index", redirectResult.RouteValues["action"]);
            Assert.IsTrue(controller.TempData.ContainsKey("notification"));
            var notification = controller.TempData["notification"] as AlertMessage;
            Assert.IsTrue(notification.notificationType == Enums.Enums.NotificationType.success);
        }
        [TestMethod()]
        public void Delete_Existtant_<#=entityType.Name#>_Test()
        {
            // Arrange
            <#=entityType.Name.Pluralize()#>Controller controller = new <#=entityType.Name.Pluralize()#>Controller();

            // Acte 
            var result = controller.DeleteConfirmed(-1) as RedirectToRouteResult;

            // Assert 
            Assert.AreEqual("Index", result.RouteValues["action"]);
            Assert.IsTrue(controller.TempData.ContainsKey("notification"));
            var notification = controller.TempData["notification"] as AlertMessage;
            Assert.IsTrue(notification.notificationType == Enums.Enums.NotificationType.error);
        } 
    }
}

<#
} // for
manager.Process();
#>