<#@ template language="C#" debug="true" hostspecific="true"#>
<#@ output extension=".cs"#>
<#@ include file="lib.ttinclude" #> 
<#@ assembly name="GAppTemp\bin\Debug\GAppTemp.dll" #>
<#@ assembly name="TrainningIS.DAL\bin\Debug\TrainingIS.DAL.dll" #>
<#@ assembly name="TrainningIS.DAL\bin\Debug\EntityFramework.dll" #>
<#@ assembly name="TrainningIS.DAL\bin\Debug\EntityFramework.SqlServer.dll" #>
<#@ include file=".\Index_Test.ttinclude" #>
<#@ include file=".\Create_Test.ttinclude" #>
<#@ include file=".\Edit_Test.ttinclude" #>
<#@ include file=".\Details_Test.ttinclude" #>
<#@ include file=".\Delete_Test.ttinclude" #>
  
<#@ import namespace="GApp.WebApp.Manager.Generator" #>
<#@ import namespace="System.Data.Entity" #> 
<#@ import namespace="TrainingIS.DAL" #>    
<#       
    EntityService<TrainingISModel> entityService = new EntityService<TrainingISModel>();
	List<Type> Entities = entityService.getAllEntities();

	// Create file for All Entities
	var manager = TemplateFileManager.Create(this);
#>
<#
	foreach(Type entityType in Entities)
    { 

		EntityGeneratorWork<TrainingISModel> entityGenWork = new EntityGeneratorWork<TrainingISModel>(entityType);
	    manager.StartNewFile(entityType.Name.Pluralize() + "ControllerTests.cs");

#>
using Microsoft.VisualStudio.TestTools.UnitTesting;
using TrainingIS.WebApp.Controllers;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Web.Mvc;
using TrainingIS.Entities;
using AutoFixture;
using TrainingIS.BLL;
using TrainingIS.DAL;
using TrainingIS.WebApp.Tests.ViewModels;
using System.ComponentModel.DataAnnotations;
using TrainingIS.WebApp.Helpers.AlertMessages;
using GApp.WebApp.Tests;
using GApp.WebApp.Manager.Views;
using TrainingIS.WebApp.Tests.TestUtilities;

namespace TrainingIS.WebApp.Controllers.Tests
{
    [TestClass()]
    public class <#=entityType.Name.Pluralize()#>ControllerTests : ManagerControllerTests
    {
        private Fixture _Fixture = null;

		public <#=entityType.Name.Pluralize()#>ControllerTests()
        {
		    // Create Fixture Instance
            _Fixture = new Fixture();
            _Fixture.Behaviors.OfType<ThrowingRecursionBehavior>().ToList()
                    .ForEach(b => _Fixture.Behaviors.Remove(b));
            _Fixture.Behaviors.Add(new OmitOnRecursionBehavior());
        }
	
        #region Initialize
        [TestInitialize]
        public void InitTest()
        {}

		/// <summary>
        /// Find the first <#=entityType.Name#> instance or create if table is emtpy
        /// </summary>
        /// <returns></returns>
        public <#=entityType.Name#> CreateOrLouadFirst<#=entityType.Name#>(UnitOfWork unitOfWork)
        {
            <#=entityType.Name#>BLO <#=entityType.Name.ToLower()#>BLO = new <#=entityType.Name#>BLO(unitOfWork);
           
		   <#=entityType.Name#> entity = null;
            if (<#=entityType.Name.ToLower()#>BLO.FindAll()?.Count > 0)
                entity = <#=entityType.Name.ToLower()#>BLO.FindAll()?.First();
		   
		 
            if (entity == null)
            {
                // Create Temp <#=entityType.Name#> for Test
                entity = this.CreateValide<#=entityType.Name#>Instance();
                <#=entityType.Name.ToLower()#>BLO.Save(entity);
            }
            return entity;
        }

        private <#=entityType.Name#> CreateValide<#=entityType.Name#>Instance(UnitOfWork unitOfWork = null)
        {
            if(unitOfWork == null) unitOfWork = new UnitOfWork();
        
            <#=entityType.Name#>  Valide_<#=entityType.Name#> = this._Fixture.Create<<#=entityType.Name#>>();
            Valide_<#=entityType.Name#>.Id = 0;
            // Many to One 
            //
<# 
	foreach (var foreignKeyName in entityGenWork.ForeignKeyNames) {
#>
			// <#= foreignKeyName #>
			var <#= foreignKeyName #> = new <#= foreignKeyName.Pluralize() #>ControllerTests().CreateOrLouadFirst<#= foreignKeyName #>(unitOfWork);
            Valide_<#=entityType.Name#>.<#= foreignKeyName #> = null;
            Valide_<#=entityType.Name#>.<#= foreignKeyName #>Id = <#= foreignKeyName #>.Id;
<#
	}	
#>
            // One to Many
            //
<# 
        foreach (var ManyRelationsShipName in entityGenWork.ManyRelationsShipNames)
        { 
#>
			Valide_<#=entityType.Name#>.<#= ManyRelationsShipName #> = null;
<#
        }	
#>
            return Valide_<#=entityType.Name#>;
        }

        /// <summary>
        /// 
        /// </summary> 
        /// <returns>Return null if InValide <#=entityType.Name#> can't exist</returns>
        private <#=entityType.Name#> CreateInValide<#=entityType.Name#>Instance(UnitOfWork unitOfWork = null)
        {
            <#=entityType.Name#> <#=entityType.Name.ToLower()#> = this.CreateValide<#=entityType.Name#>Instance(unitOfWork);
             
			// Required   
<# foreach (var item in entityGenWork.getRequiredProperties())
  {
#> 
			<#=entityType.Name.ToLower()#>.<#= item.Name #> = <#= entityGenWork.Code_Of_DefaultValue(item.PropertyType) #>;
<# 
 }  
#>
            //Unique
			var existant_<#=entityType.Name#> = this.CreateOrLouadFirst<#=entityType.Name#>(new UnitOfWork());
<# foreach (var item in entityGenWork.getUniqueProperties())
  {
#>
			<#=entityType.Name.ToLower()#>.<#= item.Name #> = existant_<#=entityType.Name#>.<#= item.Name #>;
<# 
 } 
#>
            
            return <#=entityType.Name.ToLower()#>;
        }


		  private <#=entityType.Name#> CreateInValide<#=entityType.Name#>Instance_ForEdit(UnitOfWork unitOfWork = null)
        {
            <#=entityType.Name#> <#=entityType.Name.ToLower()#> = this.CreateOrLouadFirst<#=entityType.Name#>(unitOfWork);
             
			// Required   
<# foreach (var item in entityGenWork.getRequiredProperties())
  {
#> 
			<#=entityType.Name.ToLower()#>.<#= item.Name #> = <#= entityGenWork.Code_Of_DefaultValue(item.PropertyType) #>;
<# 
 }  
#>
            //Unique
			var existant_<#=entityType.Name#> = this.CreateOrLouadFirst<#=entityType.Name#>(new UnitOfWork());
<# foreach (var item in entityGenWork.getUniqueProperties())
  {
#>
			<#=entityType.Name.ToLower()#>.<#= item.Name #> = existant_<#=entityType.Name#>.<#= item.Name #>;
<# 
 } 
#>
            
            return <#=entityType.Name.ToLower()#>;
        }


		 
        #endregion

        #region TestCleanup
        [TestCleanup]
        public void Clean_UP_Test()
        {} 
        #endregion
<#
Type indexViewModel_Type = entityGenWork.getIndexModelView_Type(); 
if(indexViewModel_Type == null) {
	this.Index_Tests(entityType);
} else {
	this.Index_ModelView_Tests(entityType,indexViewModel_Type,entityGenWork);		
}
#>
<#
Type createViewModel_Type = entityGenWork.getCreateModelView_Type(); 
if(createViewModel_Type == null) {
	this.Create_Tests(entityType);
} else {
	this.Create_ModelView_Tests(entityType,createViewModel_Type,entityGenWork);		
}
#>
<#
Type editViewModel_Type = entityGenWork.getEditModelView_Type(); 
if(editViewModel_Type == null) {
	this.Edit_Tests(entityType);
} else {
	this.Edit_ModelView_Tests(entityType,createViewModel_Type,entityGenWork);		
}
#>
<#
Type detailsViewModel_Type = entityGenWork.getDetailsModelView_Type(); 
if(detailsViewModel_Type == null) {
	this.Details_Tests(entityType);
} else {
	this.Details_ModelView_Tests(entityType,detailsViewModel_Type,entityGenWork);		
}
#>
<#
Type deleteViewModel_Type = entityGenWork.getDeleteModelView_Type(); 
if(deleteViewModel_Type == null) {
	this.Delete_Tests(entityType);
} else {
	this.Delete_ModelView_Tests(entityType,deleteViewModel_Type,entityGenWork);		
}
#>  
    }
}

<#
} // for
manager.Process();
#>