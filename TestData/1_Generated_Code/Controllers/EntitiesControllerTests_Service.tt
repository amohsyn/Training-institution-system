<#@ template language="C#" debug="true"   hostspecific="true"#>
<#@ CleanupBehavior processor="T4VSHost" CleanupAfterProcessingtemplate="true" #>  
<#@ output extension=".cs"#> 
<#@ include file="..\Lib\Imports.include.t4" #>
<#@ include file="..\Lib\lib.ttinclude" #> 
<#   
	// Create file for All Entities
	var manager = TemplateFileManager.Create(this);  
	List<Type> Entities = EntitiesControllerTests_Service<TrainingISModel>.GetEntitiesTypes();
	foreach(Type entityType in Entities)
    {    
		EntitiesControllerTests_Service<TrainingISModel> Generator = new EntitiesControllerTests_Service<TrainingISModel>(entityType,new TrainingIS.Models.GAppDevContext()); 
		var Code = Generator.Code;
		manager.StartNewFile(Code.FileName);
		

#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TrainingIS.Entities;
using AutoFixture;
using TrainingIS.BLL;
using TrainingIS.DAL;
using System.ComponentModel.DataAnnotations;
using GApp.WebApp.Manager.Views;
using GApp.DAL;
using GApp.Entities;
using GApp.Core.Context;
<# foreach (var name_space in Code.Expcected_NameSpaces) { #>
using <#= name_space #>;
<#}#>
using TrainingIS.BLL.ModelsViews;
using GApp.UnitTest.TestData;
using GApp.UnitTest.TestData.Enums;

namespace TestData
{
    public class Base<#=Code.ClassName#> : ITestDataFactory<<#=entityType.Name#>>
    {
        private Fixture _Fixture = null;
		protected List<<#=entityType.Name#>> Data;
        protected Dictionary<Trainee, DataErrorsTypes> Data_with_errors;

	    protected UnitOfWork<TrainingISModel> UnitOfWork { set; get; }
        protected GAppContext GAppContext { set; get; }

		public Base<#=Code.ClassName#>(UnitOfWork<TrainingISModel> UnitOfWork, GAppContext GAppContext)
        {
		    this.UnitOfWork = UnitOfWork;
            this.GAppContext = GAppContext;

		    // Create Fixture Instance
            _Fixture = new Fixture();
            _Fixture.Behaviors.OfType<ThrowingRecursionBehavior>().ToList()
                    .ForEach(b => _Fixture.Behaviors.Remove(b));
            _Fixture.Behaviors.Add(new OmitOnRecursionBehavior());
        }

		public List<<#=entityType.Name#>> All()
        {
            return Data ?? (Data = Generate());
        }
        public virtual List<<#=entityType.Name#>> Generate()
        {
            return null;
        }
	
		/// <summary>
        /// Find the first <#=entityType.Name#> instance or create if table is emtpy
        /// </summary>
        /// <returns></returns>
        public virtual <#=entityType.Name#> CreateOrLouadFirst<#=entityType.Name#>()
        {
            <#=entityType.Name#>BLO <#=entityType.Name.ToLower()#>BLO = new <#=entityType.Name#>BLO(UnitOfWork,GAppContext);
           
			<#=entityType.Name#> entity = null;
            if (<#=entityType.Name.ToLower()#>BLO.FindAll()?.Count > 0)
                entity = <#=entityType.Name.ToLower()#>BLO.FindAll()?.First();
		   
            if (entity == null)
            {
                // Create Temp <#=entityType.Name#> for Test
                entity = this.CreateValide<#=entityType.Name#>Instance();
                <#=entityType.Name.ToLower()#>BLO.Save(entity);
            }
            return entity;
        }

        public virtual <#=entityType.Name#> CreateValide<#=entityType.Name#>Instance()
        {
            if(UnitOfWork == null) UnitOfWork = new UnitOfWork<TrainingISModel>();
        
            <#=entityType.Name#>  Valide_<#=entityType.Name#> = this._Fixture.Create<<#=entityType.Name#>>();
            Valide_<#=entityType.Name#>.Id = 0;
            // Many to One 
            //
<# 
	foreach (var foreignKeyName in Generator.EntityFramework.ForeignKeiesNames) {
#>
			// <#= foreignKeyName #>
			var <#= foreignKeyName #> = new <#= foreignKeyName #>TestDataFactory(UnitOfWork,GAppContext).CreateOrLouadFirst<#= foreignKeyName #>();
            Valide_<#=entityType.Name#>.<#= foreignKeyName #> = null;
            Valide_<#=entityType.Name#>.<#= foreignKeyName #>Id = <#= foreignKeyName #>.Id;
<#
	}	
#>
            // One to Many
            //
<# 
        foreach (var ManyRelationsShipName in Generator.EntityFramework.ManyRelationshipNames)
        { 
#>
			Valide_<#=entityType.Name#>.<#= ManyRelationsShipName #> = null;
<#
        }	
#>
            return Valide_<#=entityType.Name#>;
        }

        /// <summary>
        /// 
        /// </summary> 
        /// <returns>Return null if InValide <#=entityType.Name#> can't exist</returns>
        public virtual <#=entityType.Name#> CreateInValide<#=entityType.Name#>Instance()
        {
            <#=entityType.Name#> <#=entityType.Name.ToLower()#> = this.CreateValide<#=entityType.Name#>Instance();
             
			// Required   
<# foreach (var item in Generator.Properties.getRequiredProperties())
  {
#> 
			<#=entityType.Name.ToLower()#>.<#= item.Name #> = <#= Generator.Code_Of_DefaultValue(item.PropertyType) #>;
<# 
 }  
#>
            //Unique
			var existant_<#=entityType.Name#> = this.CreateOrLouadFirst<#=entityType.Name#>();
<# foreach (var item in Generator.Properties.getUniqueProperties())
  {
#>
			<#=entityType.Name.ToLower()#>.<#= item.Name #> = existant_<#=entityType.Name#>.<#= item.Name #>;
<# 
 } 
#> 
            return <#=entityType.Name.ToLower()#>;
        }


		public virtual <#=entityType.Name#> CreateInValide<#=entityType.Name#>Instance_ForEdit()
        {
            <#=entityType.Name#> <#=entityType.Name.ToLower()#> = this.CreateOrLouadFirst<#=entityType.Name#>();
			// Required   
<# foreach (var item in Generator.Properties.getRequiredProperties())
  {
#> 
			<#=entityType.Name.ToLower()#>.<#= item.Name #> = <#= Generator.Code_Of_DefaultValue(item.PropertyType) #>;
<# 
 }  
#>
            //Unique
			var existant_<#=entityType.Name#> = this.CreateOrLouadFirst<#=entityType.Name#>();
<# foreach (var item in Generator.Properties.getUniqueProperties())
  {
#>
			<#=entityType.Name.ToLower()#>.<#= item.Name #> = existant_<#=entityType.Name#>.<#= item.Name #>;
<# 
 } 
#>
            return <#=entityType.Name.ToLower()#>;
        }
    }

	public partial class <#=Code.ClassName#> : Base<#=Code.ClassName#>{
	
		public <#=Code.ClassName#>(UnitOfWork<TrainingISModel> UnitOfWork, GAppContext GAppContext) : base(UnitOfWork, GAppContext)
        {
        }
	
	}
}
<#
} // for
manager.Process();
#>