<#@ template language="C#" debug="true"   hostspecific="true"#>
<#@ CleanupBehavior processor="T4VSHost" CleanupAfterProcessingtemplate="true" #>  
<#@ output extension=".cs"#> 
<#@ include file="..\Lib\Imports.include.t4" #>
<#@ include file="..\Lib\lib.ttinclude" #> 
<#    
	// Create file for All Entities
	var manager = TemplateFileManager.Create(this);  
    List<Type> Entities = EntitiesControllerTests_Service<TrainingISModel>.GetEntitiesTypes();
	manager.StartNewFile("BaseDataGenerator.cs");
#>
using GApp.Core.Context;
using GApp.DAL;
using GApp.UnitTest.TestData;
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using TestData;
using TrainingIS.DAL;
using TrainingIS.Entities;
using System.Collections.Generic;
using GApp.Entities;
using System.IO;
namespace TestDataGenerator.TestData
{
    public class BaseDataGenerator
    {
        UnitOfWork<TrainingISModel> UnitOfWork { set; get; }
        GAppContext GAppContext { set; get; }

        public BaseDataGenerator()
        {
            UnitOfWork = new UnitOfWork<TrainingISModel>();
            GAppContext = new GAppContext("Root");
        }
        public virtual void Insert_Test_Data()
        {
        <# 	foreach(Type entityType in Entities){  #>			
			<#= entityType.Name #>TestDataFactory <#= entityType.Name #>_TestData = new <#= entityType.Name #>TestDataFactory(new UnitOfWork<TrainingISModel>(), GAppContext);
			<#= entityType.Name #>_TestData.Insert_Test_Data();

        <#}#>
        }

		public virtual void Update_Test_Data()
        {
        <# 	foreach(Type entityType in Entities){  #>			
			<#= entityType.Name #>TestDataFactory <#= entityType.Name #>_TestData = new <#= entityType.Name #>TestDataFactory(new UnitOfWork<TrainingISModel>(), GAppContext);
			<#= entityType.Name #>_TestData.Update_Test_Data();

        <#}#>
        }

		public virtual Dictionary<Type, string> Get_TestData_Files()
        {
            Dictionary<Type, string> Data = new Dictionary<Type, string>();
<# 	foreach(Type entityType in Entities){  #>	
			<#= entityType.Name #>TestDataFactory <#= entityType.Name #>_TestData = new <#= entityType.Name #>TestDataFactory(new UnitOfWork<TrainingISModel>(), GAppContext);
            if (File.Exists(<#= entityType.Name #>_TestData.Get_Data_File_Name())){
                Data.Add(typeof(<#= entityType.Name #>), <#= entityType.Name #>_TestData.Get_Data_File_Name());
            }
            else{
                Data.Add(typeof(<#= entityType.Name #>), "");
            }
<#}#>
            return Data;
        }

		public virtual Dictionary<Type, Type> Get_TestData_Types()
        {
            Dictionary<Type, Type> Data = new Dictionary<Type, Type>();
<# 	foreach(Type entityType in Entities){  #>	
            Data.Add( typeof(<#= entityType.Name #>) , typeof(<#= entityType.Name #>TestDataFactory));
<#}#>
            return Data;
        }


    }
}
<#
manager.Process();
#>
