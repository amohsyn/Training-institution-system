<#@ template language="C#" debug="true" hostspecific="true"#>
<#@ output extension=".cs"#>
<#@ include file="lib.ttinclude" #>
<#@ assembly name="GAppTemp\bin\Debug\GAppTemp.dll" #>
<#@ assembly name="TrainningIS.DAL\bin\Debug\TrainingIS.DAL.dll" #>
<#@ assembly name="TrainningIS.DAL\bin\Debug\EntityFramework.dll" #>
<#@ assembly name="TrainningIS.DAL\bin\Debug\EntityFramework.SqlServer.dll" #>
<#@ import namespace="GApp.WebApp.Manager.Generator" #>
<#@ import namespace="System.Data.Entity" #> 
<#@ import namespace="TrainingIS.DAL" #>
<#@ import namespace="GApp.WebApp.Manager.Views" #>
<#       
    EntityService<TrainingISModel> entityService = new EntityService<TrainingISModel>();
	List<Type> Entities = entityService.getAllEntities();

	// Create file for All Entities
	var manager = TemplateFileManager.Create(this);
#>
  
<#
	foreach(Type entityType in Entities)
    { 

		ModelViewMetaData modelViewMetaData = new ModelViewMetaData(entityType);
		EntityGeneratorWork<TrainingISModel> entityGenWork = new EntityGeneratorWork<TrainingISModel>(entityType);


	    bool isHaveModelView = (modelViewMetaData.CreateViewAttribute != null 
		|| modelViewMetaData.EditViewAttribute != null 
		|| modelViewMetaData.DetailsViewAttribute != null );

		if(!isHaveModelView) continue;
	    manager.StartNewFile(entityType.Name + "_Convertion_Generated.cs");

#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TrainingIS.Entities.ModelsViews.<#=entityType.Name#>ModelsViews;

namespace TrainingIS.Entities
{
    public partial class <#=entityType.Name#>
    {
<# if(modelViewMetaData.IndexViewAttribute != null){
	   Type LineViewType = entityGenWork.GetLineViewType();
#>
        // 
        // LineGroupView
        //
        public static implicit operator <#=entityType.Name#>(<#=LineViewType.Name#> <#=LineViewType.Name#>)
        {
            <#=entityType.Name#> <#=entityType.Name#> = new <#=entityType.Name#>();
<# foreach (var enityProperty in LineViewType.GetProperties())
             { 
			       
					if( entityType
						.GetProperties()
						.Where(p=>p.Name == enityProperty.Name)
						.FirstOrDefault() != null){
#>
			<#=entityType.Name#>.<#=enityProperty.Name#> = <#= LineViewType.Name#>.<#=enityProperty.Name#>;
<#
					}
}
#>
            return <#=entityType.Name#>;
        }
        public static implicit operator <#=LineViewType.Name#>(<#=entityType.Name#> <#=entityType.Name#>)
        { 
            <#=LineViewType.Name#> <#=LineViewType.Name#> = new <#=LineViewType.Name#>();
<# foreach (var enityProperty in entityType.GetProperties())
             { 
			       
					if( LineViewType
						.GetProperties()
						.Where(p=>p.Name == enityProperty.Name)
						.FirstOrDefault() != null){
#>
			<#=LineViewType.Name#>.<#=enityProperty.Name#> = <#=entityType.Name#>.<#=enityProperty.Name#>;
<#
					}
}
#>
            return Line<#=entityType.Name#>View;
        }
		<#}#>

<# if(modelViewMetaData.CreateViewAttribute != null){
		Type CreateViewType = entityGenWork.getCreateModelView_Type();
#>
		
        // 
        // CreateGroupView
        //
        public static implicit operator <#=entityType.Name#>(<#=CreateViewType.Name#> <#=CreateViewType.Name#>)
        {
            <#=entityType.Name#> <#=entityType.Name#> = new <#=entityType.Name#>();
<# 
foreach (var enityProperty in CreateViewType.GetProperties())
             { 
					if( entityType
						.GetProperties()
						.Where(p=>p.Name == enityProperty.Name)
						.FirstOrDefault() != null){
#>
			<#=entityType.Name#>.<#=enityProperty.Name#> = <#=CreateViewType.Name#>.<#=enityProperty.Name#>;
<#
					}
}
#>
            return <#=entityType.Name#>;
        } 
        public static implicit operator <#=CreateViewType.Name#>(<#=entityType.Name#> <#=entityType.Name#>)
        { 

            <#=CreateViewType.Name#> <#=CreateViewType.Name#> = new <#=CreateViewType.Name#>();
<# 
foreach (var enityProperty in entityType.GetProperties())
             { 
					if( CreateViewType
						.GetProperties()
						.Where(p=>p.Name == enityProperty.Name)
						.FirstOrDefault() != null){
#>
			<#=CreateViewType.Name#>.<#=enityProperty.Name#> = <#=entityType.Name#>.<#=enityProperty.Name#>;
<#
					}
}
#>
            return <#=CreateViewType.Name#>;
        }
		<#}#>

<# if(modelViewMetaData.EditViewAttribute != null){
	Type EditModelView_Type = entityGenWork.getEditModelView_Type();
#>
        // 
        // EditGroupView
        //
        public static implicit operator <#=entityType.Name#>(<#=EditModelView_Type.Name#> <#=EditModelView_Type.Name#>)
        {
            <#=entityType.Name#> <#=entityType.Name#> = new <#=entityType.Name#>();
<# 
foreach (var enityProperty in EditModelView_Type.GetProperties())
             { 
					if( entityType 
						.GetProperties()
						.Where(p=>p.Name == enityProperty.Name)
						.FirstOrDefault() != null){
#>
			<#=entityType.Name#>.<#=enityProperty.Name#> = <#=EditModelView_Type.Name#>.<#=enityProperty.Name#>;
<#
					}
}
#>
            return <#=entityType.Name#>;
        } 
        public static implicit operator <#=EditModelView_Type.Name#>(<#=entityType.Name#> <#=entityType.Name#>)
        {
            <#=EditModelView_Type.Name#> <#=EditModelView_Type.Name#> = new <#=EditModelView_Type.Name#>();
<# 
foreach (var enityProperty in entityType.GetProperties())
             { 
					if( EditModelView_Type
						.GetProperties()
						.Where(p=>p.Name == enityProperty.Name)
						.FirstOrDefault() != null){
#>
			<#=EditModelView_Type.Name#>.<#=enityProperty.Name#> = <#=entityType.Name#>.<#=enityProperty.Name#>;
<#
					}
}
#>
            return <#=EditModelView_Type.Name#>;
        }
		<#}#>


<# 
Type DetailsModelView_Type = entityGenWork.getDetailsModelView_Type();
if(modelViewMetaData.DetailsViewAttribute != null){#>
        // 
        // DetailsGroupView
        //
        public static implicit operator <#=entityType.Name#>(<#=DetailsModelView_Type.Name#> <#=DetailsModelView_Type.Name#>)
        {
            <#=entityType.Name#> <#=entityType.Name#> = new <#=entityType.Name#>();
<# 
foreach (var enityProperty in DetailsModelView_Type.GetProperties())
             { 
					if( entityType
						.GetProperties()
						.Where(p=>p.Name == enityProperty.Name)
						.FirstOrDefault() != null){
#>
			<#=entityType.Name#>.<#=enityProperty.Name#> = <#=DetailsModelView_Type.Name#>.<#=enityProperty.Name#>;
<#
					}
}
#>
            return <#=entityType.Name#>;
        }
        public static implicit operator <#=DetailsModelView_Type.Name#>(<#=entityType.Name#> <#=entityType.Name#>)
        {
            <#=DetailsModelView_Type.Name#> <#=DetailsModelView_Type.Name#> = new <#=DetailsModelView_Type.Name#>();
<# 
foreach (var enityProperty in entityType.GetProperties())
             { 
					if( DetailsModelView_Type
						.GetProperties()
						.Where(p=>p.Name == enityProperty.Name)
						.FirstOrDefault() != null){
#>
			<#=DetailsModelView_Type.Name#>.<#=enityProperty.Name#> = <#=entityType.Name#>.<#=enityProperty.Name#>;
<#
					}
}
#>
            return <#=DetailsModelView_Type.Name#>;
        }
		<#}#>
    }
}
<#
} // for
manager.Process();
#>