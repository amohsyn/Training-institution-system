<#@ template language="C#" debug="true"   hostspecific="true"#>
<#@ output extension=".cs"#> 
<#@ include file="..\Lib\Imports.include.t4" #>
<#@ include file="..\Lib\lib.ttinclude" #>
<#       
    EntityService<TrainingISModel> entityService = new EntityService<TrainingISModel>();
	List<Type> Entities = entityService.getAllEntities();
#> 

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TrainingIS.Entities.ModelsViews.Generated
{
    public partial class Base_DefaultModelView_MetaData
    {
       
       
        public Base_DefaultModelView_MetaData()
        { 
<#  
	foreach(Type entityType in Entities)
    { 

		ModelViewMetaData modelViewMetaData = new ModelViewMetaData(entityType);
		EntityGeneratorWork<TrainingISModel> entityGenWork = new EntityGeneratorWork<TrainingISModel>(entityType);
	    
		CodeStringCsharp codeStringCsharp = new CodeStringCsharp();
        List<string> NamesSapces = new List<string>();
        List<string> CodeProperties = new List<string>();
        codeStringCsharp.GenerateCodeProperties(entityGenWork.DefaultIndexProperties(), NamesSapces, CodeProperties);

		 
		 
#>
			ModelsViewsTypes[typeof(<#= entityType.Name #>)] = new List<Type>();
			ModelsViewsTypes[typeof(<#= entityType.Name #>)].Add(typeof(<#= entityGenWork.DetailsModelView_ClassName #>));
			ModelsViewsTypes[typeof(<#= entityType.Name #>)].Add(typeof(<#= entityGenWork.FormModelView_ClassName #>));
  
<# } #>
        }
    }
}


