<#@ template language="C#" debug="true"   hostspecific="true"#>
<#@ output extension=".cs"#> 
<#@ include file="..\Lib\Imports.include.t4" #>
<#@ include file="..\Lib\lib.ttinclude" #>
<#       
    EntityService<TrainingISModel> entityService = new EntityService<TrainingISModel>();
	List<Type> Entities = entityService.getAllEntities(); 

	// Create file for All Entities
	var manager = TemplateFileManager.Create(this);
#> 
<#
	foreach(Type entityType in Entities)
    { 

		ModelViewMetaData modelViewMetaData = new ModelViewMetaData(entityType);

		  

		ModelView_CodeGenerator<TrainingISModel> ModelView_CodeGenerator =
               new ModelView_CodeGenerator<TrainingISModel>(entityType, new DefaultModelView_MetaData().ModelsViewsTypes);
		 
	    manager.StartNewFile(string.Format(ModelView_CodeGenerator.FormModelView_ClassName + ".cs", entityType.Name) );

		CodeStringCsharp codeStringCsharp = new CodeStringCsharp(Operations.Edit);
        List<string> NamesSapces = new List<string>();
        List<string> CodeProperties = new List<string>();
        codeStringCsharp.GenerateCodeProperties(ModelView_CodeGenerator.DefaultEditProperties(), NamesSapces, CodeProperties);

#>
using GApp.Core.Entities.ModelsViews;
using System;  
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Web.Mvc;
using TrainingIS.Entities.Resources.AppResources;
using GApp.Core.MetaDatas.Attributes; 
<# foreach (var item in NamesSapces){#>
using <#= item #>; 
<#}#>

namespace TrainingIS.Entities.ModelsViews
{
    
    public class <#=ModelView_CodeGenerator.FormModelView_ClassName #> : BaseModelView
    {
<#  foreach (var codeProperty in CodeProperties)
    { 
#>		<#= codeProperty #>  
   
<#    
    } 
#>
    }
}
<# } 
manager.Process();
#>
