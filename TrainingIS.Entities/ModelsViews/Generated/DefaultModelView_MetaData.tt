<#@ template language="C#" debug="true" hostspecific="true"#>
<#@ output extension=".cs"#>
<#@ include file="lib.ttinclude" #>
<#@ assembly name="GAppTemp\bin\Debug\GAppTemp.dll" #>
<#@ assembly name="TrainningIS.DAL\bin\Debug\TrainingIS.DAL.dll" #>
<#@ assembly name="TrainningIS.DAL\bin\Debug\EntityFramework.dll" #>
<#@ assembly name="TrainningIS.DAL\bin\Debug\EntityFramework.SqlServer.dll" #>
<#@ import namespace="GApp.WebApp.Manager.Generator" #>
<#@ import namespace="System.Data.Entity" #>   
<#@ import namespace="TrainingIS.DAL" #>
<#@ import namespace="GApp.WebApp.Manager.Views" #>
<#@ import namespace="GApp.Dev.Generator" #>
<#       
    EntityService<TrainingISModel> entityService = new EntityService<TrainingISModel>();
	List<Type> Entities = entityService.getAllEntities();
#> 

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TrainingIS.Entities.ModelsViews.Generated
{
    public class DefaultModelView_MetaData
    {
        private List<Type> _List_Default_ModelsViewsTypes;
        public List<Type> List_Default_ModelsViewsTypes {
            get
            {
                if(_List_Default_ModelsViewsTypes == null)
                {
                    foreach (var key in this.ModelsViewsTypes.Keys)
                    {
                        _List_Default_ModelsViewsTypes.AddRange(this.ModelsViewsTypes[key]);
                    }
                }
                return _List_Default_ModelsViewsTypes;
                   
            }
        }
        public Dictionary<Type, List<Type>> ModelsViewsTypes { set; get; }
        public  DefaultModelView_MetaData()
        {
            ModelsViewsTypes = new Dictionary<Type, List<Type>>();
<#  
	foreach(Type entityType in Entities)
    { 

		ModelViewMetaData modelViewMetaData = new ModelViewMetaData(entityType);
		EntityGeneratorWork<TrainingISModel> entityGenWork = new EntityGeneratorWork<TrainingISModel>(entityType);
	    
		CodeStringCsharp codeStringCsharp = new CodeStringCsharp();
        List<string> NamesSapces = new List<string>();
        List<string> CodeProperties = new List<string>();
        codeStringCsharp.GenerateCodeProperties(entityGenWork.DefaultIndexProperties(), NamesSapces, CodeProperties);

		 
		 
#>
			ModelsViewsTypes[typeof(<#= entityType.Name #>)] = new List<Type>();
			ModelsViewsTypes[typeof(<#= entityType.Name #>)].Add(typeof(<#= entityGenWork.DetailsModelView_ClassName #>));
			ModelsViewsTypes[typeof(<#= entityType.Name #>)].Add(typeof(<#= entityGenWork.FormModelView_ClassName #>));
  
<# } #>
        }
    }
}


