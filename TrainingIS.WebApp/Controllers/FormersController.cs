using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Web;
using System.Web.Mvc;
using TrainingIS.DAL;
using TrainingIS.Entities;
using TrainingIS.BLL;
using GApp.DAL.ReadExcel;
using ClosedXML.Excel;
using System.IO;

namespace TrainingIS.WebApp.Controllers
{
    // Generated by Manager v 0.0.2
    public class FormersController : BaseController
    {
        private FormerBLO formerBLO = new FormerBLO();

        public ActionResult Index()
        {
           return View(formerBLO.FindAll());
        }

        public ActionResult Details(long? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }

            Former former = formerBLO.FindBaseEntityByID((long) id);
            if (former == null)
            {
                return HttpNotFound();
            }
            return View(former);
        }

        public ActionResult Create()
        {
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create([Bind(Include = "Id,FirstName,LastName,Sex,CIN,Cellphone,Email,Address,FaceBook,WebSite,RegistrationNumber")] Former former)
        {
            if (ModelState.IsValid)
            {
                formerBLO.Save(former);

                return RedirectToAction("Index");
            }

            return View(former);
        }

        public ActionResult Edit(long? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }

            Former former = formerBLO.FindBaseEntityByID((long)id);
            if (former == null)
            {
                return HttpNotFound();
            }
            return View(former);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit([Bind(Include = "Id,FirstName,LastName,Sex,CIN,Cellphone,Email,Address,FaceBook,WebSite,RegistrationNumber")] Former former)
        {
            if (ModelState.IsValid)
            {
                Former old_former = formerBLO.FindBaseEntityByID(former.Id);
                UpdateModel(old_former);
                formerBLO.Save(old_former);
                return RedirectToAction("Index");
            }
            return View(former);
        }

        public ActionResult Delete(long? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }

            Former former = formerBLO.FindBaseEntityByID((long)id);
            if (former == null)
            {
                return HttpNotFound();
            }
            return View(former);
        }

        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public ActionResult DeleteConfirmed(long id)
        {
			Former former = formerBLO.FindBaseEntityByID((long)id);
            formerBLO.Delete(former);
            return RedirectToAction("Index");
        }


        public ActionResult Import()
        {
            //Save excel file to server
            HttpPostedFileBase parametersTemplate = Request.Files["import_formers"];
            string path = Server.MapPath("~/Content/Files/Upload" + parametersTemplate.FileName);
            if (System.IO.File.Exists(path))
            {
                System.IO.File.Delete(path);
                parametersTemplate.SaveAs(path);
            }
            parametersTemplate.SaveAs(path);

            //Save new parameters to database
            var excelData = new ExcelData(path); // link to other project
            DataTable firstTable = excelData.getFirstTable();
            formerBLO.Import(firstTable);

            //List<string> ListColumns = excelData.GetColums(firstTable);


            //List<Former> lsFormer = new List<Former>();


            //foreach (var row in fileInput)
            //{
            //    var former = new Former();
            //    {
            //         = float.Parse(row["Heading 1"].ToString()),
            //        Parameter2 = float.Parse(row["Heading 2"].ToString()),

            //        Result = ((float.Parse(row["Heading 1"].ToString())) * float.Parse(row["Heading 2"].ToString()))
            //    };
            //    calculationList.Add(parameterDataToAdd);
            //}

            //var testFlag = calculationList;



            return RedirectToAction("Index");
        }


        public FileResult Export()
        {
            using (XLWorkbook wb = new XLWorkbook())
            {
                wb.Worksheets.Add(formerBLO.Export());
                using (MemoryStream stream = new MemoryStream())
                {
                    wb.SaveAs(stream);
                    return File(stream.ToArray(), "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "Formtateurs.xlsx");
                }
            }
        }

        private IDisposable GenerateClosedXMLWorkbook()
        {
            throw new NotImplementedException();
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                formerBLO.Dispose();
            }
            base.Dispose(disposing);
        }


    }
}
