using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Web;
using System.Web.Mvc;
using TrainingIS.DAL;
using TrainingIS.Entities;
using TrainingIS.BLL;

namespace TrainingIS.WebApp.Controllers
{
    // Generated by Manager v 0.0.2
    public class FormersController : BaseController
    {
        private FormerBLO formerBLO = new FormerBLO();

        public ActionResult Index()
        {
           return View(formerBLO.FindAll());
        }

        public ActionResult Details(long? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }

            Former former = formerBLO.FindBaseEntityByID((long) id);
            if (former == null)
            {
                return HttpNotFound();
            }
            return View(former);
        }

        public ActionResult Create()
        {
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create([Bind(Include = "Id,FirstName,LastName,Sex,CIN,Cellphone,Email,Address,FaceBook,WebSite,RegistrationNumber")] Former former)
        {
            if (ModelState.IsValid)
            {
                formerBLO.Save(former);

                return RedirectToAction("Index");
            }

            return View(former);
        }

        public ActionResult Edit(long? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }

            Former former = formerBLO.FindBaseEntityByID((long)id);
            if (former == null)
            {
                return HttpNotFound();
            }
            return View(former);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit([Bind(Include = "Id,FirstName,LastName,Sex,CIN,Cellphone,Email,Address,FaceBook,WebSite,RegistrationNumber")] Former former)
        {
            if (ModelState.IsValid)
            {
                Former old_former = formerBLO.FindBaseEntityByID(former.Id);
                UpdateModel(old_former);
                formerBLO.Save(old_former);
                return RedirectToAction("Index");
            }
            return View(former);
        }

        public ActionResult Delete(long? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }

            Former former = formerBLO.FindBaseEntityByID((long)id);
            if (former == null)
            {
                return HttpNotFound();
            }
            return View(former);
        }

        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public ActionResult DeleteConfirmed(long id)
        {
			Former former = formerBLO.FindBaseEntityByID((long)id);
            formerBLO.Delete(former);
            return RedirectToAction("Index");
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                formerBLO.Dispose();
            }
            base.Dispose(disposing);
        }
    }
}
