<#@ template language="C#" debug="true" hostspecific="true"#>
<#@ output extension=".cs"#>
<#@ include file="lib.ttinclude" #>
   
<#@ assembly name="GAppTemp\bin\Debug\GAppTemp.dll" #>
<#@ assembly name="TrainningIS.DAL\bin\Debug\TrainingIS.DAL.dll" #>
<#@ assembly name="TrainningIS.DAL\bin\Debug\EntityFramework.dll" #>
<#@ assembly name="TrainningIS.DAL\bin\Debug\EntityFramework.SqlServer.dll" #>
<#@ import namespace="GApp.WebApp.Manager.Generator" #>
<#@ import namespace="System.Data.Entity" #> 
<#@ import namespace="TrainingIS.DAL" #>
<#@ assembly name="EnvDte" #> 
<#       
    EntityService<TrainingISModel> entityService = new EntityService<TrainingISModel>();
	List<Type> Entities = entityService.getAllEntities();

	// Create file for All Entities
	var manager = TemplateFileManager.Create(this);
#>
  
<#
	foreach(Type entityType in Entities)
    {
		manager.StartNewFile(entityType.Name + "Controller_Generated.cs");
		EntityGeneratorWork<TrainingISModel> entityGenWork = new EntityGeneratorWork<TrainingISModel>(entityType);

#>
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Web;
using System.Web.Mvc;
using TrainingIS.DAL;
using TrainingIS.Entities;
using TrainingIS.BLL;
using TrainingIS.BLL.Exceptions;
using GApp.DAL.ReadExcel;
using ClosedXML.Excel;
using System.IO;
using static TrainingIS.WebApp.Enums.Enums;
using TrainingIS.Entities.Resources.<#= entityType.Name #>Resources;
using TrainingIS.WebApp.Manager.Views.msgs;
using TrainingIS.WebApp.Helpers;
using GApp.DAL.Exceptions;
using TrainingIS.WebApp.ViewModels;
using TrainingIS.Entities.ModelsViews.GroupModelsViews;


namespace TrainingIS.WebApp.Controllers
{
    // Generated by Manager v 0.2.0
    public class Base<#= entityType.Name.Pluralize() #>Controller : BaseController
    {
        protected <#= entityType.Name #>BLO <#= entityType.Name #>BLO = null;

		public Base<#= entityType.Name.Pluralize() #>Controller()
        {
            this.msgHelper = new MsgViews(typeof(<#= entityType.Name #>));
			this.<#= entityType.Name #>BLO = new <#= entityType.Name #>BLO(this._UnitOfWork);
        }

        public virtual ActionResult Index()
        {
		   msgHelper.Index(msg);
<#
Type indexViewModel_Type = entityGenWork.getIndexModelView_Type(); 
if(indexViewModel_Type == null) {
#>
			return View(<#= entityType.Name #>BLO.FindAll());
<# } else { #>
			return View(<#= entityType.Name #>BLO.FindAll().Select(entity=> new <#= indexViewModel_Type.Name #>()));
<#}#>
        }
		 
        public virtual ActionResult Details(long? id)
        {
		    msgHelper.Details(msg);
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }

            <#= entityType.Name #> <#= entityType.Name #> = <#= entityType.Name #>BLO.FindBaseEntityByID((long) id);
            if (<#= entityType.Name #> == null)
            {
                return HttpNotFound();
            }

<#
Type DetailsModelView_Type = entityGenWork.getDetailsModelView_Type(); 
if(DetailsModelView_Type == null) {
#>
			 return View(<#= entityType.Name #>);
<# } else { #>
			<#= DetailsModelView_Type.Name #> <#= DetailsModelView_Type.Name #> = new <#= DetailsModelView_Type.Name #>();
		    <#= DetailsModelView_Type.Name #> = <#= entityType.Name #>;
			 return View(<#= DetailsModelView_Type.Name #>);
<#}#>
        }
		 
        public virtual ActionResult Create()
        {
			msgHelper.Create(msg);

<# // SelectLists 
Type CreateModelView_Type = entityGenWork.getCreateModelView_Type(); 
if(CreateModelView_Type == null) {
		foreach(string foreignKey in entityService.GetForeignKeyNames(entityType)) { #>
            ViewBag.<#= foreignKey #>Id = new SelectList(new <#= foreignKey #>BLO(this._UnitOfWork).FindAll(), "Id", "Code");
<#		} #>
<#} 
else {
			foreach(string foreignKey in entityService.GetForeignKeyNames(entityType)) { 
				// If the CreateModelView contraine foreignKey
				if(CreateModelView_Type.GetProperties().Where(p=>p.Name == foreignKey).FirstOrDefault() != null)
				{
#>
			ViewBag.<#= foreignKey #>Id = new SelectList(new <#= foreignKey #>BLO(this._UnitOfWork).FindAll(), "Id", "Code");
<#				}        
			} 			
}#>
            return View();
        }  
		 
        [HttpPost]
        [ValidateAntiForgeryToken]

<#
if(CreateModelView_Type == null) {
#>
		public virtual ActionResult Create([Bind(Include = "<#= entityGenWork.IncludeBind #>")] <#= entityType.Name #> <#= entityType.Name #>)
<# } else { #>
		public virtual ActionResult Create([Bind(Include = "<#= entityGenWork.IncludeBind #>")] <#= CreateModelView_Type.Name #> <#= CreateModelView_Type.Name #>)
<#}#>
        {

<#
// Map to ViewModel to Model
if(CreateModelView_Type == null) {
#>
		
<# } else { #>
			 <#= entityType.Name #> <#= entityType.Name #> = new <#= entityType.Name #>() ;
			 <#= entityType.Name #> = <#= CreateModelView_Type.Name #>;
<#}#>

			bool dataBaseException = false;
            if (ModelState.IsValid)
            {
				try
                {
                    <#= entityType.Name #>BLO.Save(<#= entityType.Name #>);
					Alert(string.Format(msgManager.The_Entity_was_well_created, msg_<#= entityType.Name #>.SingularName, <#= entityType.Name #>), NotificationType.success);
					return RedirectToAction("Index");
                }
                catch (GAppDataBaseException ex)
                {
					dataBaseException = true;
                    Alert(ex.Message, NotificationType.error);
                }
            }
			if (!dataBaseException)
            {
                Alert(msgManager.The_information_you_have_entered_is_not_valid, NotificationType.warning);
            }
			msgHelper.Create(msg);

<# // SelectLists 
CreateModelView_Type = entityGenWork.getCreateModelView_Type(); 
if(CreateModelView_Type == null) {
		foreach(string foreignKey in entityService.GetForeignKeyNames(entityType)) { #>
            ViewBag.<#= foreignKey #>Id = new SelectList(new <#= foreignKey #>BLO(this._UnitOfWork).FindAll(), "Id", "Code", <#= entityType.Name #>.<#= foreignKey #>Id);
<#		} #>
            return View(<#= entityType.Name #>);
<#} 
else {
			foreach(string foreignKey in entityService.GetForeignKeyNames(entityType)) { 
				// If the CreateModelView contraine foreignKey
				if(CreateModelView_Type.GetProperties().Where(p=>p.Name == foreignKey).FirstOrDefault() != null)
				{
#>
			ViewBag.<#= foreignKey #>Id = new SelectList(new <#= foreignKey #>BLO(this._UnitOfWork).FindAll(), "Id", "Code", <#= entityType.Name #>.<#= foreignKey #>Id);
<#				}        
			} 
#>
			return View(<#= CreateModelView_Type.Name #>);
<#}#>
        }

        public virtual ActionResult Edit(long? id)
        {
			bool dataBaseException = false;
			msgHelper.Edit(msg);
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }

            <#= entityType.Name #> <#= entityType.Name #> = <#= entityType.Name #>BLO.FindBaseEntityByID((long)id);
            if (<#= entityType.Name #> == null)
            {
                return HttpNotFound();
            }			 
<# // SelectLists 
Type EditModelView_Type = entityGenWork.getEditModelView_Type(); 
if(EditModelView_Type == null) {
		foreach(string foreignKey in entityService.GetForeignKeyNames(entityType)) { #>
            ViewBag.<#= foreignKey #>Id = new SelectList(new <#= foreignKey #>BLO(this._UnitOfWork).FindAll(), "Id", "Code", <#= entityType.Name #>.<#= foreignKey #>Id);
<#		} #>
<#} 
else {
#>
		<#= EditModelView_Type.Name #> <#= EditModelView_Type.Name #> = new <#= EditModelView_Type.Name #>();
<#
			foreach(string foreignKey in entityService.GetForeignKeyNames(entityType)) { 
				// If the CreateModelView contraine foreignKey
				if(EditModelView_Type.GetProperties().Where(p=>p.Name == foreignKey).FirstOrDefault() != null)
				{
#>
			ViewBag.<#= foreignKey #>Id = new SelectList(new <#= foreignKey #>BLO(this._UnitOfWork).FindAll(), "Id", "Code", <#= EditModelView_Type.Name #>.<#= foreignKey #>Id);
<#				}        
			} 			
}#>

<#
if(EditModelView_Type == null) {
#>
			 return View(<#= entityType.Name #>);
<# } else { #>
			  return View(<#= EditModelView_Type.Name #>);
<#}#>

        }


        [HttpPost]
        [ValidateAntiForgeryToken]
<# if(EditModelView_Type == null) {#>
		public virtual ActionResult Edit([Bind(Include = "<#= entityGenWork.IncludeBind #>")] <#= entityType.Name #> <#= entityType.Name #>)	
<# } else { #>
		public virtual ActionResult Edit([Bind(Include = "<#= entityGenWork.IncludeBind #>")] <#= EditModelView_Type.Name #> <#= EditModelView_Type.Name #>)	
<#}#>
        {
<# if(EditModelView_Type != null) {#>
			<#= entityType.Name #> <#= entityType.Name #> = <#= EditModelView_Type.Name #>;
       
<# } #>
			bool dataBaseException = false;
            if (ModelState.IsValid)
            {
                <#= entityType.Name #> old_<#= entityType.Name #> = <#= entityType.Name #>BLO.FindBaseEntityByID(<#= entityType.Name #>.Id);
                UpdateModel(old_<#= entityType.Name #>);

				try
                {
                    <#= entityType.Name #>BLO.Save(old_<#= entityType.Name #>);
					Alert(string.Format(msgManager.The_entity_has_been_changed, msg_<#= entityType.Name #>.SingularName, <#= entityType.Name #>), NotificationType.success);
					return RedirectToAction("Index");
                }
                catch (GAppDataBaseException ex)
                {
					dataBaseException = true;
                    Alert(ex.Message, NotificationType.error);
                }
            }
			if (!dataBaseException)
            {
                Alert(msgManager.The_information_you_have_entered_is_not_valid, NotificationType.warning);
            }
			msgHelper.Edit(msg);

<# // SelectLists 
EditModelView_Type = entityGenWork.getEditModelView_Type(); 
if(EditModelView_Type == null) {
		foreach(string foreignKey in entityService.GetForeignKeyNames(entityType)) { #>
            ViewBag.<#= foreignKey #>Id = new SelectList(new <#= foreignKey #>BLO(this._UnitOfWork).FindAll(), "Id", "Code", <#= entityType.Name #>.<#= foreignKey #>Id);
<#		} #>
		return View(<#= entityType.Name #>);
<#} 
else {
			foreach(string foreignKey in entityService.GetForeignKeyNames(entityType)) { 
				// If the CreateModelView contraine foreignKey
				if(EditModelView_Type.GetProperties().Where(p=>p.Name == foreignKey).FirstOrDefault() != null)
				{
#>
			ViewBag.<#= foreignKey #>Id = new SelectList(new <#= foreignKey #>BLO(this._UnitOfWork).FindAll(), "Id", "Code", <#= EditModelView_Type.Name #>.<#= foreignKey #>Id);
<#				}        
			}
#>
			return View(<#= EditModelView_Type.Name #>);
<#}#>

        }

        public virtual ActionResult Delete(long? id)
        {
			msgHelper.Delete(msg);
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }

            <#= entityType.Name #> <#= entityType.Name #> = <#= entityType.Name #>BLO.FindBaseEntityByID((long)id);
            if (<#= entityType.Name #> == null)
            {
                return HttpNotFound();
            }

<#
 DetailsModelView_Type = entityGenWork.getDetailsModelView_Type(); 
if(DetailsModelView_Type == null) {
#>
			 return View(<#= entityType.Name #>);
<# } else { #>
			<#= DetailsModelView_Type.Name #> <#= DetailsModelView_Type.Name #> = <#= entityType.Name #>;
			 return View(<#= DetailsModelView_Type.Name #>);
<#}#>
        }

        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public virtual ActionResult DeleteConfirmed(long id)
        {
			<#= entityType.Name #> <#= entityType.Name #> = <#= entityType.Name #>BLO.FindBaseEntityByID((long)id);
            <#= entityType.Name #>BLO.Delete(<#= entityType.Name #>);
			Alert(string.Format(msgManager.The_entity_has_been_removed, msg_<#= entityType.Name #>.SingularName, <#= entityType.Name #>), NotificationType.success);
            return RedirectToAction("Index");
        }

		public virtual ActionResult Import()
        {
            string FileName = "Import_" + Guid.NewGuid().ToString() + ".xlsx";

            //Save excel file to the server
            HttpPostedFileBase postedFile = Request.Files["import_objects"];
            string path = Server.MapPath("~/Content/Files/" + FileName);
            postedFile.SaveAs(path);

            //Save to database
            var excelData = new ExcelData(path);
            DataTable firstTable = excelData.getFirstTable();
            try
            {
                ImportReport importReport = <#= entityType.Name #>BLO.Import(firstTable, FileName);

                // Save ExcelRepport file to Server
                DataSet DataSet_report = importReport.get_DataSet_Report();
                using (XLWorkbook wb = new XLWorkbook())
                {
                    wb.Worksheets.Add(DataSet_report);
                    string path_repport = ControllerContext.HttpContext.Server.MapPath("~/Content/Files/" + "Repport_" + FileName + ".xlsx");
                    Session["path_repport"] = path_repport;
                    wb.SaveAs(path_repport);

                    // Add DownLoad Link to Repport
                    string a_download = "<a href=\"/<#= entityType.Name.Pluralize() #>/LastRepportFile\">Télécharger le rapport d'importation</a>";
                    importReport.AddMessage(a_download, MessagesService.MessageTypes.Meta_msg);

                }

                // Show HTML Report
                Message(importReport.get_HTML_Report(), NotificationType.info);
            }
            catch (ImportException e)
            {
                Message(e.Message, NotificationType.error);
            }
            return RedirectToAction("Index");
        }


        public virtual FileResult Export()
        {
            using (XLWorkbook wb = new XLWorkbook())
            {
                DataTable dataTable = <#= entityType.Name #>BLO.Export();
                wb.Worksheets.Add(dataTable);
                using (MemoryStream stream = new MemoryStream())
                {
                    wb.SaveAs(stream);
                    return File(stream.ToArray(), "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", msg_<#= entityType.Name #>.PluralName + ".xlsx");
                }
            }
        }

		public FileResult LastRepportFile()
        {
            // [Bug] if the user try to Import multiple data in the same time
            if (Session["path_repport"] != null)
            {
                string path = Session["path_repport"] as string;
                var fileStream = new FileStream(path, FileMode.Open);
                string FileName = "Rapport d'importation - " + DateTime.Now.ToString();
                return File(fileStream, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "Import_Repport" + ".xlsx");

            }
            return null;

        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                <#= entityType.Name #>BLO.Dispose();
            }
            base.Dispose(disposing);
        }
    }

	public partial class <#= entityType.Name.Pluralize() #>Controller : Base<#= entityType.Name.Pluralize() #>Controller{};
}

<#
} // for
manager.Process();
#>


