<#@ template language="C#" debug="true" hostspecific="true"#>
<#@ output extension=".cs"#>   
<#@ include file="lib.ttinclude" #>   
<#@ assembly name="GAppTemp\bin\Debug\GAppTemp.dll" #> 
<#@ assembly name="TrainningIS.DAL\bin\Debug\TrainingIS.DAL.dll" #>
<#@ assembly name="TrainningIS.DAL\bin\Debug\EntityFramework.dll" #>
<#@ assembly name="TrainningIS.DAL\bin\Debug\EntityFramework.SqlServer.dll" #>
<#@ assembly name="TrainingIS.Entities\bin\Debug\TrainingIS.Entities.dll" #> 
<#@ assembly name="GAppTemp\bin\Debug\GAppTemp.dll" #>  
<#@ import namespace="GApp.WebApp.Manager.Generator" #>    
<#@ import namespace="System.Data.Entity" #>  
<#@ import namespace="TrainingIS.Entities.ModelsViews.Generated" #>
<#@ import namespace="TrainingIS.DAL" #>  
<#       
    EntityService<TrainingISModel> entityService = new EntityService<TrainingISModel>();
	List<Type> Entities = entityService.getAllEntities();
	var manager = TemplateFileManager.Create(this);

	foreach(Type entityType in Entities)
    { 
		manager.StartNewFile(entityType.Name + "Controller_Generated.cs");
		Dictionary<Type, List<Type>> Default_ModelsViewsTypes = new DefaultModelView_MetaData().ModelsViewsTypes;
		Controller_CodeGenerator<TrainingISModel>  controller_CodeGenerator = new Controller_CodeGenerator<TrainingISModel>(entityType, Default_ModelsViewsTypes);
		ModelView_CodeGenerator<TrainingISModel>  modelView_CodeGenerator = new ModelView_CodeGenerator<TrainingISModel>(entityType, Default_ModelsViewsTypes);
		RelationShip_CodeGenerator<TrainingISModel> relationShip_CodeGenerator =  new RelationShip_CodeGenerator<TrainingISModel>(entityType);
		Type indexViewModel_Type = modelView_CodeGenerator.getIndexModelView_Type(); 
		Type CreateModelView_Type = modelView_CodeGenerator.getCreateModelView_Type(); 
		Type DetailsModelView_Type = modelView_CodeGenerator.getDetailsModelView_Type(); 
		Type EditModelView_Type = modelView_CodeGenerator.getEditModelView_Type(); 

#>using System;
using System.Collections.Generic; 
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Web;
using System.Web.Mvc;
using TrainingIS.DAL;
using TrainingIS.Entities;
using TrainingIS.BLL;
using TrainingIS.BLL.Exceptions;
using GApp.DAL.ReadExcel;
using ClosedXML.Excel;
using System.IO;     
using static TrainingIS.WebApp.Enums.Enums;
using TrainingIS.Entities.Resources.<#= entityType.Name #>Resources;
using TrainingIS.WebApp.Manager.Views.msgs;
using TrainingIS.WebApp.Helpers;
using GApp.DAL.Exceptions; 
using GApp.Entities;
using TrainingIS.BLL.ModelsViews;
<# foreach (var name_space in modelView_CodeGenerator.ModelsViewsNamesSpaces) { #>
using <#= name_space #>;
<#}#>
namespace TrainingIS.WebApp.Controllers
{  
    // Generated by Manager v 0.2.0 
    public class Base<#= entityType.Name.Pluralize() #>Controller : BaseController
    {
        protected <#= entityType.Name #>BLO <#= entityType.Name #>BLO = null;

		public Base<#= entityType.Name.Pluralize() #>Controller()
        {
            this.msgHelper = new MessagesService(typeof(<#= entityType.Name #>));
			this.<#= entityType.Name #>BLO = new <#= entityType.Name #>BLO(this._UnitOfWork);
        }

	    public virtual ActionResult Index()
        {
		    msgHelper.Index(msg);
            List<<#= indexViewModel_Type.Name #>> list<#= indexViewModel_Type.Name #> = new List<<#= indexViewModel_Type.Name #>>();
			foreach (var item in <#= entityType.Name #>BLO.FindAll()){
                <#= indexViewModel_Type.Name #> <#= indexViewModel_Type.Name #> = new <#= indexViewModel_Type.Name #>BLM(this._UnitOfWork)
                    .ConverTo_<#= indexViewModel_Type.Name #>(item);
                list<#= indexViewModel_Type.Name #>.Add(<#= indexViewModel_Type.Name #>);
            }
			return View(list<#= indexViewModel_Type.Name #>);
		}

		[HttpPost] 
        [ValidateAntiForgeryToken]
		public virtual ActionResult Create([Bind(Include = "<#= controller_CodeGenerator.GetCreateInludeBind() #>")] <#= CreateModelView_Type.Name #> <#= CreateModelView_Type.Name #>)
        {
			<#= entityType.Name #> <#= entityType.Name #> = null ;
			<#= entityType.Name #> = new <#= CreateModelView_Type.Name #>BLM(this._UnitOfWork)
										.ConverTo_<#= entityType.Name #>(<#= CreateModelView_Type.Name #>);

			bool dataBaseException = false;
            if (ModelState.IsValid)
            {
				
				try
                {
                    <#= entityType.Name #>BLO.Save(<#= entityType.Name #>);
					Alert(string.Format(msgManager.The_Entity_was_well_created, msgHelper.DefinitArticle(), msg_<#= entityType.Name #>.SingularName, <#= entityType.Name #>), NotificationType.success);
					return RedirectToAction("Index");
                }
                catch (GAppDbException ex)
                {
					dataBaseException = true;
                    Alert(ex.Message, NotificationType.error);
                }
            }
			if (!dataBaseException)
            {
                Alert(msgManager.The_information_you_have_entered_is_not_valid, NotificationType.warning);
            }
			msgHelper.Create(msg);
<# 
	foreach(string foreignKey in relationShip_CodeGenerator.ForeignKeyNames) 
	{ 
		var foreignKeyId = foreignKey + "Id";
		// If the CreateModelView contraine foreignKey
		if(CreateModelView_Type.GetProperties().Where(p=>p.Name == foreignKeyId).FirstOrDefault() != null)
		{
#>
			ViewBag.<#= foreignKeyId #> = new SelectList(new <#= foreignKey #>BLO(this._UnitOfWork).FindAll(), "Id", "Code", <#= entityType.Name #>.<#= foreignKey #>Id);
<#		}        
	} 
#>
			return View(<#= CreateModelView_Type.Name #>);
        }


		public virtual ActionResult Create()
        {
			msgHelper.Create(msg);		
<# 
	foreach(string foreignKey in relationShip_CodeGenerator.ForeignKeyNames) { 
		var foreignKeyId = foreignKey + "Id";
	// If the CreateModelView contraine foreignKey
		if(CreateModelView_Type.GetProperties().Where(p=>p.Name == foreignKeyId).FirstOrDefault() != null)
		{
#>
			ViewBag.<#= foreignKeyId #> = new SelectList(new <#= foreignKey #>BLO(this._UnitOfWork).FindAll(), "Id", "Code");
<#		}        
   } 			
#>
            <#= entityType.Name #> <#= entityType.Name.ToLower() #> = new <#= entityType.Name #>();
            <#= CreateModelView_Type.Name #> <#= CreateModelView_Type.Name.ToLower() #> = new <#= CreateModelView_Type.Name #>BLM(this._UnitOfWork)
                                        .ConverTo_<#= CreateModelView_Type.Name #>(<#= entityType.Name.ToLower() #>);
            return View(<#= CreateModelView_Type.Name.ToLower() #>);
        } 
		 
       


		public virtual ActionResult Edit(long? id)
        {
			bool dataBaseException = false;
			msgHelper.Edit(msg);
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }

            <#= entityType.Name #> <#= entityType.Name #> = <#= entityType.Name #>BLO.FindBaseEntityByID((long)id);
            if (<#= entityType.Name #> == null)
            {
                string msg = string.Format(msgManager.You_try_to_edit_that_does_not_exist, msgHelper.UndefindedArticle(), msg_<#= entityType.Name #>.SingularName);
                Alert(msg, NotificationType.error);
                return RedirectToAction("Index");
            }			 
			<#= EditModelView_Type.Name #> <#= EditModelView_Type.Name #> = new <#= EditModelView_Type.Name #>BLM(this._UnitOfWork)
                                                                .ConverTo_<#= EditModelView_Type.Name #>(<#= entityType.Name #>) ;

<#		foreach(string foreignKey in relationShip_CodeGenerator.ForeignKeyNames) { 

			var foreignKeyId = foreignKey + "Id";
			if(EditModelView_Type.GetProperties().Where(p=>p.Name == foreignKeyId).FirstOrDefault() != null)
			{
#>
			ViewBag.<#= foreignKeyId #> = new SelectList(new <#= foreignKey #>BLO(this._UnitOfWork).FindAll(), "Id", "Code", <#= EditModelView_Type.Name #>.<#= foreignKeyId #>);
<#			}        
		} 			
#> 
			return View(<#= EditModelView_Type.Name #>);
        }

		[HttpPost]
        [ValidateAntiForgeryToken]
		public virtual ActionResult Edit([Bind(Include = "<#= controller_CodeGenerator.GetEditInludeBind() #>")] <#= EditModelView_Type.Name #> <#= EditModelView_Type.Name #>)	
        {
			<#= entityType.Name #> <#= entityType.Name #> = new <#= EditModelView_Type.Name #>BLM(this._UnitOfWork)
                .ConverTo_<#= entityType.Name #>( <#= EditModelView_Type.Name #>);

			bool dataBaseException = false;
            if (ModelState.IsValid)
            {
				

				try
                {
                    <#= entityType.Name #>BLO.Save(<#= entityType.Name #>);
					Alert(string.Format(msgManager.The_entity_has_been_changed,msgHelper.DefinitArticle(), msg_<#= entityType.Name #>.SingularName, <#= entityType.Name #>), NotificationType.success);
					return RedirectToAction("Index");
                }
                catch (GAppDbException ex)
                {
					dataBaseException = true;
                    Alert(ex.Message, NotificationType.error);
                }
            }
			if (!dataBaseException) 
            {
                Alert(msgManager.The_information_you_have_entered_is_not_valid, NotificationType.warning);
            }
			msgHelper.Edit(msg);

<# 
	foreach(string foreignKey in entityService.GetForeignKeyNames(entityType)) { 
		var foreignKeyId = foreignKey + "Id";
		// If the CreateModelView contraine foreignKey
		if(EditModelView_Type.GetProperties().Where(p=>p.Name == foreignKeyId).FirstOrDefault() != null)
		{
#>
			ViewBag.<#= foreignKey #>Id = new SelectList(new <#= foreignKey #>BLO(this._UnitOfWork).FindAll(), "Id", "Code", <#= EditModelView_Type.Name #>.<#= foreignKey #>Id);
<#		}        
	}
#>
			return View(<#= EditModelView_Type.Name #>);
        }

		public virtual ActionResult Details(long? id)
        {
		    msgHelper.Details(msg);
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            <#= entityType.Name #> <#= entityType.Name #> = <#= entityType.Name #>BLO.FindBaseEntityByID((long) id);
            if (<#= entityType.Name #> == null)
            {
                string msg = string.Format(msgManager.You_try_to_show_that_does_not_exist, msgHelper.UndefindedArticle(), msg_<#= entityType.Name #>.SingularName);
                Alert(msg, NotificationType.error);
                return RedirectToAction("Index");
            }
			<#= DetailsModelView_Type.Name #> <#= DetailsModelView_Type.Name #> = new <#= DetailsModelView_Type.Name #>();
		    <#= DetailsModelView_Type.Name #> = new <#= DetailsModelView_Type.Name #>BLM(this._UnitOfWork)
                .ConverTo_<#= DetailsModelView_Type.Name #>(<#= entityType.Name #>);


			return View(<#= DetailsModelView_Type.Name #>);
        } 

		 public virtual ActionResult Delete(long? id)
        {
			msgHelper.Delete(msg);
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }

            <#= entityType.Name #> <#= entityType.Name #> = <#= entityType.Name #>BLO.FindBaseEntityByID((long)id);
            if (<#= entityType.Name #> == null)
            {
			    string msg = string.Format(msgManager.You_try_to_delete_that_does_not_exist, msgHelper.UndefindedArticle(), msg_<#= entityType.Name #>.SingularName);
                Alert(msg, NotificationType.error);
                return RedirectToAction("Index");
            }

			<#= DetailsModelView_Type.Name #> <#= DetailsModelView_Type.Name #> = new <#= DetailsModelView_Type.Name #>BLM(this._UnitOfWork)
							.ConverTo_<#= DetailsModelView_Type.Name #>(<#= entityType.Name #>);


			 return View(<#= DetailsModelView_Type.Name #>);

        }

        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public virtual ActionResult DeleteConfirmed(long id)
        {
			<#= entityType.Name #> <#= entityType.Name #> = <#= entityType.Name #>BLO.FindBaseEntityByID((long)id);
			if (<#= entityType.Name #> == null)
            {
			    string msg = string.Format(msgManager.You_try_to_delete_that_does_not_exist, msgHelper.UndefindedArticle(), msg_<#= entityType.Name #>.SingularName);
                Alert(msg, NotificationType.error);
                return RedirectToAction("Index");
            }
            
			try
            {
                <#= entityType.Name #>BLO.Delete(<#= entityType.Name #>);
            }
            catch (GAppDbUpdate_ForeignKeyViolation_Exception ex)
            {
                string msg = string.Format(msgManager.You_can_not_delete_this_entity_because_it_is_already_related_to_another_object, <#= entityType.Name #>.ToString());
                Alert(msg, NotificationType.error);
                return RedirectToAction("Index");
            }
            catch (GAppDbException ex)
            {
                Alert(ex.Message, NotificationType.error);
                return RedirectToAction("Index");
            }

			Alert(string.Format(msgManager.The_entity_has_been_removed,msgHelper.DefinitArticle(), msg_<#= entityType.Name #>.SingularName, <#= entityType.Name #>), NotificationType.success);
            return RedirectToAction("Index");
        }

		public virtual ActionResult Import()
        {
            string FileName = "Import_" + Guid.NewGuid().ToString() + ".xlsx";

            //Save excel file to the server
            HttpPostedFileBase postedFile = Request.Files["import_objects"];
            string path = Server.MapPath("~/Content/Files/" + FileName);
            postedFile.SaveAs(path);

            //Save to database
            var excelData = new ExcelData(path);
            DataTable firstTable = excelData.getFirstTable();
            try
            {
                ImportReport importReport = <#= entityType.Name #>BLO.Import(firstTable, FileName);

                // Save ExcelRepport file to Server
                DataSet DataSet_report = importReport.get_DataSet_Report();
                using (XLWorkbook wb = new XLWorkbook())
                {
                    wb.Worksheets.Add(DataSet_report);
                    string path_repport = ControllerContext.HttpContext.Server.MapPath("~/Content/Files/" + "Repport_" + FileName + ".xlsx");
                    Session["path_repport"] = path_repport;
                    wb.SaveAs(path_repport);

                    // Add DownLoad Link to Repport
                    string a_download = "<a href=\"/<#= entityType.Name.Pluralize() #>/LastRepportFile\">Télécharger le rapport d'importation</a>";
                    importReport.AddMessage(a_download, MessagesService.MessageTypes.Meta_msg);

                }

                // Show HTML Report
                Message(importReport.get_HTML_Report(), NotificationType.info);
            }
            catch (ImportException e)
            {
                Message(e.Message, NotificationType.error);
            }
            return RedirectToAction("Index");
        }


        public virtual FileResult Export()
        {
            using (XLWorkbook wb = new XLWorkbook())
            {
                DataTable dataTable = <#= entityType.Name #>BLO.Export();
                wb.Worksheets.Add(dataTable);
                using (MemoryStream stream = new MemoryStream())
                {
                    wb.SaveAs(stream);
                    return File(stream.ToArray(), "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", msg_<#= entityType.Name #>.PluralName + ".xlsx");
                }
            }
        }

		public FileResult LastRepportFile()
        {
            // [Bug] if the user try to Import multiple data in the same time
            if (Session["path_repport"] != null)
            {
                string path = Session["path_repport"] as string;
                var fileStream = new FileStream(path, FileMode.Open);
                string FileName = "Rapport d'importation - " + DateTime.Now.ToString();
                return File(fileStream, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "Import_Repport" + ".xlsx");

            }
            return null;

        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                <#= entityType.Name #>BLO.Dispose();
            }
            base.Dispose(disposing);
        }
    }

	public partial class <#= entityType.Name.Pluralize() #>Controller : Base<#= entityType.Name.Pluralize() #>Controller{};
}

<#
} // for
manager.Process();
#>


