<#+ 
  void Edit_Post_Action(Type entityType, EntityGeneratorWork<TrainingISModel> entityGenWork, EntityService<TrainingISModel> entityService){			
		#>
        [HttpPost]
        [ValidateAntiForgeryToken]
		public virtual ActionResult Edit([Bind(Include = "<#= entityGenWork.IncludeBind #>")] <#= entityType.Name #> <#= entityType.Name #>)	
        {
			this.ModelState.AddModelError(<#= entityType.Name #>BLO.Validate(<#= entityType.Name #>));
			bool dataBaseException = false;
            if (ModelState.IsValid)
            {
                <#= entityType.Name #> old_<#= entityType.Name #> = <#= entityType.Name #>BLO.FindBaseEntityByID(<#= entityType.Name #>.Id);
				old_<#= entityType.Name #>.UpdateEntity(<#= entityType.Name #>, this.GetBindAttribute(nameof(this.Edit)));

				try
                {
                    <#= entityType.Name #>BLO.Save(old_<#= entityType.Name #>);
					Alert(string.Format(msgManager.The_entity_has_been_changed, msg_<#= entityType.Name #>.SingularName, <#= entityType.Name #>), NotificationType.success);
					return RedirectToAction("Index");
                }
                catch (GAppDataBaseException ex)
                {
					dataBaseException = true;
                    Alert(ex.Message, NotificationType.error);
                }
            }
			if (!dataBaseException)
            {
                Alert(msgManager.The_information_you_have_entered_is_not_valid, NotificationType.warning);
            }
			msgHelper.Edit(msg);

<#+		foreach(string foreignKey in entityService.GetForeignKeyNames(entityType)) { #>
            ViewBag.<#= foreignKey #>Id = new SelectList(new <#= foreignKey #>BLO(this._UnitOfWork).FindAll(), "Id", "Code", <#= entityType.Name #>.<#= foreignKey #>Id);
<#+		} #>
		return View(<#= entityType.Name #>);
        }
		<#+
	}	
#><#+ 
	void Edit_Post_Action_ViewModel(Type entityType,EntityGeneratorWork<TrainingISModel> entityGenWork,Type EditModelView_Type, EntityService<TrainingISModel> entityService){			
		#>
	
		[HttpPost]
        [ValidateAntiForgeryToken]
		public virtual ActionResult Edit([Bind(Include = "<#= entityGenWork.IncludeBind #>")] <#= EditModelView_Type.Name #> <#= EditModelView_Type.Name #>)	
        {
			<#= entityType.Name #> <#= entityType.Name #> = <#= EditModelView_Type.Name #>;
			bool dataBaseException = false;
            if (ModelState.IsValid)
            {
                <#= entityType.Name #> old_<#= entityType.Name #> = <#= entityType.Name #>BLO.FindBaseEntityByID(<#= entityType.Name #>.Id);
                UpdateModel(old_<#= entityType.Name #>);

				try
                {
                    <#= entityType.Name #>BLO.Save(old_<#= entityType.Name #>);
					Alert(string.Format(msgManager.The_entity_has_been_changed, msg_<#= entityType.Name #>.SingularName, <#= entityType.Name #>), NotificationType.success);
					return RedirectToAction("Index");
                }
                catch (GAppDataBaseException ex)
                {
					dataBaseException = true;
                    Alert(ex.Message, NotificationType.error);
                }
            }
			if (!dataBaseException)
            {
                Alert(msgManager.The_information_you_have_entered_is_not_valid, NotificationType.warning);
            }
			msgHelper.Edit(msg);

<#+ 
	foreach(string foreignKey in entityService.GetForeignKeyNames(entityType)) { 
		// If the CreateModelView contraine foreignKey
		if(EditModelView_Type.GetProperties().Where(p=>p.Name == foreignKey).FirstOrDefault() != null)
		{
#>
			ViewBag.<#= foreignKey #>Id = new SelectList(new <#= foreignKey #>BLO(this._UnitOfWork).FindAll(), "Id", "Code", <#= EditModelView_Type.Name #>.<#= foreignKey #>Id);
<#+		}        
	}
#>
			return View(<#= EditModelView_Type.Name #>);
        }
		<#+
	}	
#>