using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Web;
using System.Web.Mvc;
using TrainingIS.DAL;
using TrainingIS.Entities;
using TrainingIS.BLL;
using GApp.DAL.ReadExcel;
using ClosedXML.Excel;
using System.IO;
using static TrainingIS.WebApp.Enums.Enums;
using TrainingIS.Entities.Resources.SeancePlanningResources;
using TrainingIS.WebApp.Helpers.msgs;
using TrainingIS.WebApp.Helpers;

namespace TrainingIS.WebApp.Controllers
{
    // Generated by Manager v 0.0.5
    public class BaseSeancePlanningsController : BaseController
    {
        protected SeancePlanningBLO seancePlanningBLO = null;

		public BaseSeancePlanningsController()
        {
            this.msgHelper = new MsgHelper(typeof(SeancePlanning));
            this.seancePlanningBLO = new SeancePlanningBLO(this._UnitOfWork);
        }

        public virtual ActionResult Index()
        {
		   msgHelper.Index(msg);
           return View(seancePlanningBLO.FindAll());
        }

        public virtual ActionResult Details(long? id)
        {
		    msgHelper.Details(msg);
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }

            SeancePlanning seancePlanning = seancePlanningBLO.FindBaseEntityByID((long) id);
            if (seancePlanning == null)
            {
                return HttpNotFound();
            }
            return View(seancePlanning);
        }

        public virtual ActionResult Create()
        {
		   msgHelper.Create(msg);
			
            ViewBag.SeanceDayId = new SelectList(new SeanceDayBLO(this._UnitOfWork).FindAll(), "Id", "Name");
			
            ViewBag.SeanceNumberId = new SelectList(new SeanceNumberBLO(this._UnitOfWork).FindAll(), "Id", "Code");
			
            ViewBag.TrainingId = new SelectList(new TrainingBLO(this._UnitOfWork).FindAll(), "Id", "Code");
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public virtual ActionResult Create([Bind(Include = "Id,TrainingId,SeanceDayId,SeanceNumberId,Description,CreateDate,UpdateDate")] SeancePlanning seancePlanning)
        {
			
            if (ModelState.IsValid)
            {
                seancePlanningBLO.Save(seancePlanning);
				Alert(string.Format(msgManager.The_Entity_was_well_created, msg_SeancePlanning.SingularName, seancePlanning), NotificationType.success);
                return RedirectToAction("Index");
            }
			msgHelper.Create(msg);
            ViewBag.SeanceDayId = new SelectList(new SeanceDayBLO(this._UnitOfWork).FindAll(), "Id", "Name", seancePlanning.SeanceDayId);
            ViewBag.SeanceNumberId = new SelectList(new SeanceNumberBLO(this._UnitOfWork).FindAll(), "Id", "Code", seancePlanning.SeanceNumberId);
            ViewBag.TrainingId = new SelectList(new TrainingBLO(this._UnitOfWork).FindAll(), "Id", "Code", seancePlanning.TrainingId);
		    Alert(msgManager.The_information_you_have_entered_is_not_valid, NotificationType.warning);
            return View(seancePlanning);
        }

        public virtual ActionResult Edit(long? id)
        {
			msgHelper.Edit(msg);
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }

            SeancePlanning seancePlanning = seancePlanningBLO.FindBaseEntityByID((long)id);
            if (seancePlanning == null)
            {
                return HttpNotFound();
            }
            ViewBag.SeanceDayId = new SelectList(new SeanceDayBLO(this._UnitOfWork).FindAll(), "Id", "Name", seancePlanning.SeanceDayId);
            ViewBag.SeanceNumberId = new SelectList(new SeanceNumberBLO(this._UnitOfWork).FindAll(), "Id", "Code", seancePlanning.SeanceNumberId);
            ViewBag.TrainingId = new SelectList(new TrainingBLO(this._UnitOfWork).FindAll(), "Id", "Code", seancePlanning.TrainingId);
            return View(seancePlanning);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public virtual ActionResult Edit([Bind(Include = "Id,TrainingId,SeanceDayId,SeanceNumberId,Description,CreateDate,UpdateDate")] SeancePlanning seancePlanning)
        {
            if (ModelState.IsValid)
            {
                SeancePlanning old_seancePlanning = seancePlanningBLO.FindBaseEntityByID(seancePlanning.Id);
                UpdateModel(old_seancePlanning);
                seancePlanningBLO.Save(old_seancePlanning);
				Alert(string.Format(msgManager.The_entity_has_been_changed, msg_SeancePlanning.SingularName, seancePlanning), NotificationType.success);
                return RedirectToAction("Index");
            }
            ViewBag.SeanceDayId = new SelectList(new SeanceDayBLO(this._UnitOfWork).FindAll(), "Id", "Name", seancePlanning.SeanceDayId);
            ViewBag.SeanceNumberId = new SelectList(new SeanceNumberBLO(this._UnitOfWork).FindAll(), "Id", "Code", seancePlanning.SeanceNumberId);
            ViewBag.TrainingId = new SelectList(new TrainingBLO(this._UnitOfWork).FindAll(), "Id", "Code", seancePlanning.TrainingId);

            msgHelper.Edit(msg);
			Alert(msgManager.The_information_you_have_entered_is_not_valid, NotificationType.warning);
            return View(seancePlanning);
        }

        public virtual ActionResult Delete(long? id)
        {
			msgHelper.Delete(msg);
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }

            SeancePlanning seancePlanning = seancePlanningBLO.FindBaseEntityByID((long)id);
            if (seancePlanning == null)
            {
                return HttpNotFound();
            }
            return View(seancePlanning);
        }

        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public virtual ActionResult DeleteConfirmed(long id)
        {
			SeancePlanning seancePlanning = seancePlanningBLO.FindBaseEntityByID((long)id);
            seancePlanningBLO.Delete(seancePlanning);

			 

			Alert(string.Format(msgManager.The_entity_has_been_removed, msg_SeancePlanning.SingularName, seancePlanning), NotificationType.success);
            return RedirectToAction("Index");
        }

		public virtual ActionResult Import()
        {
            //Save excel file to server
            HttpPostedFileBase parametersTemplate = Request.Files["import_objects"];

            // [Bug] if multiple user import the same file in the same moments
            string path = Server.MapPath("~/Content/Files/Upload" + parametersTemplate.FileName);
            if (System.IO.File.Exists(path))
            {
                System.IO.File.Delete(path);
                parametersTemplate.SaveAs(path);
            }
            parametersTemplate.SaveAs(path);

            //Save new parameters to database
            var excelData = new ExcelData(path); // link to other project
            DataTable firstTable = excelData.getFirstTable();

			try
            {
                string msg =   seancePlanningBLO.Import(firstTable);
                Message(msg, NotificationType.info);
               
            }
            catch (ImportLineException e)
            {
                Message(e.Message, NotificationType.info);
            }
			 return RedirectToAction("Index");
        }


        public virtual FileResult Export()
        {
            using (XLWorkbook wb = new XLWorkbook())
            {
                DataTable dataTable = seancePlanningBLO.Export();
                wb.Worksheets.Add(dataTable);
                using (MemoryStream stream = new MemoryStream())
                {
                    wb.SaveAs(stream);
                    return File(stream.ToArray(), "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", msg_SeancePlanning.PluralName + ".xlsx");
                }
            }
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                seancePlanningBLO.Dispose();
            }
            base.Dispose(disposing);
        }
    }

	public partial class SeancePlanningsController : BaseSeancePlanningsController{};
}
