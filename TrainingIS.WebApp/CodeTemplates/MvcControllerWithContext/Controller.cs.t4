<#@ template language="C#" HostSpecific="True" Debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Linq" #>
<#@ ScaffoldingAssembly Processor="ScaffoldingAssemblyLoader" #>
<#
string routePrefix;
if (String.IsNullOrEmpty(AreaName)) 
{
    routePrefix = ControllerRootName;
}
else
{
    routePrefix = AreaName + "/" + ControllerRootName;
}
#>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Microsoft.AspNet.Scaffolding.Core.Metadata" #>
<#@ parameter type="System.String" name="ControllerName" #>
<#@ parameter type="System.String" name="ControllerRootName" #>
<#@ parameter type="System.String" name="Namespace" #>
<#@ parameter type="System.String" name="AreaName" #>
<#@ parameter type="System.String" name="ContextTypeName" #>
<#@ parameter type="System.String" name="ModelTypeName" #>
<#@ parameter type="System.String" name="ModelVariable" #>
<#@ parameter type="Microsoft.AspNet.Scaffolding.Core.Metadata.ModelMetadata" name="ModelMetadata" #>
<#@ parameter type="System.String" name="EntitySetVariable" #>
<#@ parameter type="System.Boolean" name="UseAsync" #>
<#@ parameter type="System.Boolean" name="IsOverpostingProtectionRequired" #>
<#@ parameter type="System.String" name="BindAttributeIncludeText" #>
<#@ parameter type="System.String" name ="OverpostingWarningMessage" #>
<#@ parameter type="System.Collections.Generic.HashSet<System.String>" name="RequiredNamespaces" #>
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Web;
using System.Web.Mvc;
<# foreach (var namespaceName in RequiredNamespaces) { #>
using <#= namespaceName #>;
<# } #>
using TrainingIS.BLL;
using GApp.DAL.ReadExcel;
using ClosedXML.Excel;
using System.IO;
using static TrainingIS.WebApp.Enums.Enums;
using TrainingIS.Entities.Resources.<#= ModelTypeName #>Resources;
using TrainingIS.WebApp.Helpers.msgs;

namespace <#= Namespace #>
{
<#
    var contextTypeName = ContextTypeName;
    var entitySetName = ModelMetadata.EntitySetName;
    var entitySetVar = EntitySetVariable ?? (String.IsNullOrEmpty(entitySetName) ? entitySetName : (entitySetName.Substring(0, length:1).ToLowerInvariant() + entitySetName.Substring(1)));
    var primaryKeyName = ModelMetadata.PrimaryKeys[0].PropertyName;
    var primaryKeyShortTypeName = ModelMetadata.PrimaryKeys[0].ShortTypeName;
    var primaryKeyDefaultValue = ModelMetadata.PrimaryKeys[0].DefaultValue;
    var primaryKeyType = ModelMetadata.PrimaryKeys[0].TypeName;
    var primaryKeyNullableTypeName = GetNullableTypeName(primaryKeyType, primaryKeyShortTypeName);
    var lambdaVar = ModelVariable[0];
    var relatedProperties = ModelMetadata.RelatedEntities.ToDictionary(item => item.AssociationPropertyName);

	// BLL 
	var ClassBLOName = ModelTypeName + "BLO";
    var entityBloVar = ModelVariable + "BLO";

	// Exclude Properties from Bind
	var bindAttributeIncludeText = BindAttributeIncludeText;
	bindAttributeIncludeText = bindAttributeIncludeText.Replace(",DateCreation","");
	bindAttributeIncludeText = bindAttributeIncludeText.Replace(",DateModification","");
	bindAttributeIncludeText = bindAttributeIncludeText.Replace(",Ordre","");
	bindAttributeIncludeText = bindAttributeIncludeText.Replace(",Reference","");

    // BindAttribute
    string bindAttribute;
    if (IsOverpostingProtectionRequired)
    {
        bindAttribute = String.Format("[Bind(Include = \"{0}\")] ", bindAttributeIncludeText);
    }
    else
    {
        bindAttribute = String.Empty;
    }
#>
    // Generated by Manager v 0.0.3
    public class <#= ControllerName #> : BaseController
    {
        private <#= ClassBLOName #> <#= entityBloVar #> = new <#= ClassBLOName #>();

        public ActionResult Index()
        {
           return View(<#= entityBloVar #>.FindAll());
        }

        public ActionResult Details(<#= primaryKeyNullableTypeName #> id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }

            <#= ModelTypeName #> <#= ModelVariable #> = <#= entityBloVar #>.FindBaseEntityByID((long) id);
            if (<#= ModelVariable #> == null)
            {
                return HttpNotFound();
            }
            return View(<#= ModelVariable #>);
        }

        public ActionResult Create()
        {
<# foreach (var property in relatedProperties.Values) { #>
			 
            ViewBag.<#= property.ForeignKeyPropertyNames[0] #> = new SelectList(new <#= property.ShortTypeName #>BLO().FindAll(), "<#= property.PrimaryKeyNames[0] #>", "<#= property.DisplayPropertyName #>");
<# } #>
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create(<#= bindAttribute #><#= ModelTypeName #> <#= ModelVariable #>)
        {
            if (ModelState.IsValid)
            {
<# if(!String.IsNullOrEmpty(primaryKeyType) && String.Equals("System.Guid", primaryKeyType, StringComparison.OrdinalIgnoreCase)) { #>
                <#= ModelVariable #>.<#= primaryKeyName #> = Guid.NewGuid();
<# } #>
                <#= ModelVariable #>BLO.Save(<#= ModelVariable #>);
				Alert(string.Format(msgManager.The_Entity_was_well_created, msg_<#= ModelTypeName #>.SingularName, <#= ModelVariable #>), NotificationType.success);
                return RedirectToAction("Index");
            }

<# foreach (var property in relatedProperties.Values) { #>
            ViewBag.<#= property.ForeignKeyPropertyNames[0] #> = new SelectList(new <#= property.ShortTypeName #>BLO().FindAll(), "<#= property.PrimaryKeyNames[0] #>", "<#= property.DisplayPropertyName #>", <#= ModelVariable #>.<#= property.ForeignKeyPropertyNames[0] #>);
<# } #>
		    Alert(msgManager.The_information_you_have_entered_is_not_valid, NotificationType.warning);
            return View(<#= ModelVariable #>);
        }

        public ActionResult Edit(<#= primaryKeyNullableTypeName #> id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }

            <#= ModelTypeName #> <#= ModelVariable #> = <#= entityBloVar #>.FindBaseEntityByID((long)id);
            if (<#= ModelVariable #> == null)
            {
                return HttpNotFound();
            }
<# foreach (var property in relatedProperties.Values) { #>
            ViewBag.<#= property.ForeignKeyPropertyNames[0] #> = new SelectList(new <#= property.ShortTypeName #>BLO().FindAll(), "<#= property.PrimaryKeyNames[0] #>", "<#= property.DisplayPropertyName #>", <#= ModelVariable #>.<#= property.ForeignKeyPropertyNames[0] #>);
<# } #>
            return View(<#= ModelVariable #>);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit(<#= bindAttribute #><#= ModelTypeName #> <#= ModelVariable #>)
        {
            if (ModelState.IsValid)
            {
                <#= ModelTypeName #> old_<#= ModelVariable #> = <#= entityBloVar #>.FindBaseEntityByID(<#= ModelVariable #>.Id);
                UpdateModel(old_<#= ModelVariable #>);
                <#= ModelVariable #>BLO.Save(old_<#= ModelVariable #>);
				Alert(string.Format(msgManager.The_entity_has_been_changed, msg_<#= ModelTypeName #>.SingularName, <#= ModelVariable #>), NotificationType.success);
                return RedirectToAction("Index");
            }
<# foreach (var property in relatedProperties.Values) { #>
            ViewBag.<#= property.ForeignKeyPropertyNames[0] #> = new SelectList(new <#= property.ShortTypeName #>BLO().FindAll(), "<#= property.PrimaryKeyNames[0] #>", "<#= property.DisplayPropertyName #>", <#= ModelVariable #>.<#= property.ForeignKeyPropertyNames[0] #>);
<# } #>

			Alert(msgManager.The_information_you_have_entered_is_not_valid, NotificationType.warning);
            return View(<#= ModelVariable #>);
        }

        public ActionResult Delete(<#= primaryKeyNullableTypeName #> id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }

            <#= ModelTypeName #> <#= ModelVariable #> = <#= entityBloVar #>.FindBaseEntityByID((long)id);
            if (<#= ModelVariable #> == null)
            {
                return HttpNotFound();
            }
            return View(<#= ModelVariable #>);
        }

        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public ActionResult DeleteConfirmed(<#= primaryKeyShortTypeName #> id)
        {
			<#= ModelTypeName #> <#= ModelVariable #> = <#= entityBloVar #>.FindBaseEntityByID((long)id);
            <#= entityBloVar #>.Delete(<#= ModelVariable #>);

			 

			Alert(string.Format(msgManager.The_entity_has_been_removed, msg_<#= ModelTypeName #>.SingularName, <#= ModelVariable #>), NotificationType.success);
            return RedirectToAction("Index");
        }

		public ActionResult Import()
        {
            //Save excel file to server
            HttpPostedFileBase parametersTemplate = Request.Files["import_objects"];

            // [Bug] if multiple user import the same file in the same moments
            string path = Server.MapPath("~/Content/Files/Upload" + parametersTemplate.FileName);
            if (System.IO.File.Exists(path))
            {
                System.IO.File.Delete(path);
                parametersTemplate.SaveAs(path);
            }
            parametersTemplate.SaveAs(path);

            //Save new parameters to database
            var excelData = new ExcelData(path); // link to other project
            DataTable firstTable = excelData.getFirstTable();
            string msg =   <#= ModelVariable #>BLO.Import(firstTable);
            Message(msg, NotificationType.info);

            return RedirectToAction("Index");
        }


        public FileResult Export()
        {
            using (XLWorkbook wb = new XLWorkbook())
            {
                DataTable dataTable = <#= ModelVariable #>BLO.Export();
                wb.Worksheets.Add(dataTable);
                using (MemoryStream stream = new MemoryStream())
                {
                    wb.SaveAs(stream);
                    return File(stream.ToArray(), "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", msg_<#= ModelTypeName #>.PluralName + ".xlsx");
                }
            }
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                <#= entityBloVar #>.Dispose();
            }
            base.Dispose(disposing);
        }
    }
}
<#+
// This function converts the primary key short type name to its nullable equivalent when possible. This is required to make
// sure that an HTTP 400 error is thrown when the user tries to access the edit, delete, or details action with null values.
    string GetNullableTypeName(string typeName, string shortTypeName)
    {
        // The exceptions are caught because if for any reason the type is user defined, then the short type name will be used.
        // In that case the user will receive a server error if null is passed to the edit, delete, or details actions.
        Type primaryKeyType = null;
        try
        {
            primaryKeyType = Type.GetType(typeName);
        }
        catch
        {
        }
        if (primaryKeyType != null && (primaryKeyType.IsPrimitive || IsGuid(typeName)))
        {
            return shortTypeName + "?";
        }
        return shortTypeName;
    }

    bool IsGuid(string typeName) {
        return String.Equals("System.Guid", typeName, StringComparison.OrdinalIgnoreCase);
    }
#>