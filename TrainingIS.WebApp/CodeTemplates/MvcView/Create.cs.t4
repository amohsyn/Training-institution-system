<#@ template language="C#" HostSpecific="True" #>
<#@ output extension=".cshtml" #>
<#@ include file="Imports.include.t4" #>
@model <#= ViewDataTypeName #> 
@using TrainingIS.Entities
@using TrainingIS.WebApp.Helpers
@using TrainingIS.Entities.Base
<#
string boolType = "System.Boolean";
string DataTimeType = "System.DateTime" ;

Version requiredMvcVersion = new Version("5.1.0.0");
bool isControlHtmlAttributesSupported = MvcVersion >= requiredMvcVersion;
#>

@{
    ViewBag.Title = @ViewBag.msg["Create_Title"]; 
<#
if (!String.IsNullOrEmpty(LayoutPageFile)) {
#>
    Layout = "<#= LayoutPageFile#>";
<#
}
#>
}

@section Style {
    @Styles.Render("~/Content/Form")
}
@section scripts {
    @Scripts.Render("~/bundles/Form")
}

<div class="x_panel">
    <div class="x_content">
@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal">
		<h4>@ViewBag.msg["Create_Title"]</h4>
        <hr />
        @Html.ValidationSummary(false, "", new { @class = "text-danger" })

<#
foreach (PropertyMetadata property in ModelMetadata.Properties) {
    if (property.Scaffold && !property.IsAutoGenerated && !property.IsReadOnly && !property.IsAssociation) {

        // If the property is a primary key and Guid, then the Guid is generated in the controller. Hence, this propery is not displayed on the view.
        if (property.IsPrimaryKey && IsPropertyGuid(property)) {
            continue;
        }

		// Note generate inputs for : UpdateDate, CreatedDate
		if(property.PropertyName == "CreateDate" 
		|| property.PropertyName == "UpdateDate" 
		|| property.PropertyName == "Ordre"
		|| property.PropertyName == "Reference"
		) 
			continue;	

#>
        <div class="form-group">
<#
        if (property.IsForeignKey) {
#>
            @Html.LabelFor(model => model.<#= property.PropertyName #>, htmlAttributes: new { @class = "control-label col-md-2" })
<#
        } else {
#>
            @Html.LabelFor(model => model.<#= property.PropertyName #>, htmlAttributes: new { @class = "control-label col-md-2" })
<#
        }
#>
            <div class="col-md-10">
<#
        bool isCheckbox = property.TypeName.Equals(boolType);
        if (property.IsForeignKey) {
#>
                @Html.DropDownList("<#= property.PropertyName #>", null, htmlAttributes: new { @class = "form-control" })
<#
        } else {
            if (isCheckbox) {
#>
                <div class="checkbox">
<#
                PushIndent("    ");
#>
                @Html.EditorFor(model => model.<#= property.PropertyName #>)
<#
            } else {
#>
				<#= Tags.EditorFor(ViewDataTypeName, property.PropertyName) #>
<#			}

        } 
#>
                @Html.ValidationMessageFor(model => model.<#= property.PropertyName #>, "", new { @class = "text-danger" })
<#
        if (isCheckbox && isControlHtmlAttributesSupported) {
            PopIndent();
#>
                </div>
<#
        }
#>
            </div>
        </div>

<#
    }
}
#>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="@msg_app.Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

    </div>
</div>
<div class="x_panel">
    <div class="x_content">
        <a href="@Url.Action("Index")" class="btn btn-app">
            <i class="fa fa-close"></i>  @msg_app.Back_to_List
        </a>
    </div>
</div>


<#@ include file="ModelMetadataFunctions.cs.include.t4" #>