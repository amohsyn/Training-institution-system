<#@ template language="C#" debug="true"   hostspecific="true"#>
<#@ CleanupBehavior processor="T4VSHost" CleanupAfterProcessingtemplate="true" #>  
<#@ output extension=".cs"#> 
<#@ include file="..\Lib\Imports.include.t4" #>
<#@ include file="..\Lib\lib.ttinclude" #>  
<#  
	// Create file for All Entities
	var manager = TemplateFileManager.Create(this);  
	List<Type> Entities = Controller_Code<TrainingISModel>.GetEntitiesTypes();
	foreach(Type entityType in Entities)
    {    
		Controller_Code<TrainingISModel> Controller_Code = new Controller_Code<TrainingISModel>(entityType,new TrainingIS.Models.GAppDevContext()); 
		var Code = Controller_Code.Code;
		manager.StartNewFile(Code.FileName);
		
#>using System;
using System.Collections.Generic; 
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Web;
using System.Web.Mvc;
using TrainingIS.DAL;
using TrainingIS.Entities;
using TrainingIS.BLL;
using TrainingIS.BLL.Exceptions;
using GApp.DAL.ReadExcel;
using ClosedXML.Excel;
using System.IO;     
using TrainingIS.WebApp.Manager.Views.msgs;
using TrainingIS.WebApp.Helpers;
using GApp.DAL.Exceptions; 
using GApp.Entities;
using TrainingIS.BLL.ModelsViews;
using TrainingIS.Entities.Base;
using GApp.WebApp.Controllers;
using GApp.BLL.Services;
using GApp.BLL.Enums;
<# foreach (var name_space in Code.Expcected_NameSpaces) { #>
using <#= name_space #>;
<#}#> 
using System.Reflection;
using GApp.Models.DataAnnotations;
using GApp.Models.Pages;
using GApp.Models.GAppComponents;
using GApp.Exceptions;
using TrainingIS.Entities.enums;
using GApp.Core.Localization;

namespace TrainingIS.WebApp.Controllers
{  
    // Generated by GApp v 0.3.0 
    public class Base<#= Code.ClassName #> : TrainingIS_BaseController
    {
        protected <#= entityType.Name #>BLO <#= entityType.Name #>BLO = null;

		public Base<#= Code.ClassName #>()
        {
            this.msgHelper = new MessagesService(typeof(<#= entityType.Name #>));
			this.<#= entityType.Name #>BLO = new <#= entityType.Name #>BLO(this._UnitOfWork, this.GAppContext) ;
        }

	    #region Pagination Methodes
		protected virtual List<Header_DataTable_GAppComponent> Get_GAppDataTable_Header_Text_And_Ids()
        {
            List<Header_DataTable_GAppComponent> herders = new List<Header_DataTable_GAppComponent>();

            foreach (PropertyInfo model_property in typeof(<#= Controller_Code.Models.IndexModelType.Name #>).GetProperties(typeof(GAppDataTableAttribute)))
            {
                GAppDataTableAttribute gappDataTableAttribute = model_property.GetCustomAttribute(typeof(GAppDataTableAttribute)) as GAppDataTableAttribute;

				if (gappDataTableAttribute.isColumn == false) continue;

                string OrderBy = string.IsNullOrEmpty(gappDataTableAttribute.OrderBy) ? model_property.Name : gappDataTableAttribute.OrderBy;

                Header_DataTable_GAppComponent header = new Header_DataTable_GAppComponent();
                header.Id = OrderBy;
                header.Name = model_property.getLocalName();
                header.ShortName = model_property.getLocalShortName();
                herders.Add(header);
            }
            return herders;
        }

        protected virtual List<string> GetSearchCreteria()
        {
            List<string> SearchCreteria = new List<string>();
            foreach (PropertyInfo model_property in typeof(<#= Controller_Code.Models.IndexModelType.Name #>).GetProperties(typeof(GAppDataTableAttribute)))
            {
                GAppDataTableAttribute gappDataTableAttribute = model_property.GetCustomAttribute(typeof(GAppDataTableAttribute)) as GAppDataTableAttribute;
                string SearchBy = string.IsNullOrEmpty(gappDataTableAttribute.SearchBy) ? model_property.Name : gappDataTableAttribute.SearchBy;
                SearchCreteria.Add(gappDataTableAttribute.SearchBy);
            }
            foreach (PropertyInfo model_property in typeof(<#= Controller_Code.Models.IndexModelType.Name #>).GetProperties(typeof(SearchByAttribute)))
            {
                var attributes = model_property.GetCustomAttributes(typeof(SearchByAttribute));
                foreach (var attribute in attributes)
                {
                    SearchCreteria.Add((attribute as SearchByAttribute).PropertyPath);
                }

            }
            return SearchCreteria;
        }
        protected virtual void InitFilter(Index_GAppPage index_page, string FilterBy,string SearchBy)
        {

			var filters_by_infos = DataTable_GAppComponent.ParseFilterBy(FilterBy).ToList();

            
			PropertyInfo model_property = null;
		<# 
		 foreach (var element in  Controller_Code.Get_Dictionary_Property_GAppFilterItem())
            {  
		#>
			
			model_property = typeof(<#= Controller_Code.Models.IndexModelType.Name #>).GetProperty(nameof(<#= Controller_Code.Models.IndexModelType.Name #>.<#= element.Key.Name #>));
			FilterItem_GAppComponent FilterItem_<#= element.Key.Name #> = new FilterItem_GAppComponent();
			FilterItem_<#= element.Key.Name #>.Id = "<#= element.Value.Id #>";
			FilterItem_<#= element.Key.Name #>.Label = model_property.getLocalName();
			FilterItem_<#= element.Key.Name #>.Placeholder = model_property.getLocalName();
			FilterItem_<#= element.Key.Name #>.FilterItem_Category = FilterItem_GAppComponent.FilterItem_Categories.<#= element.Value.FilterItem_Category #>;
			var filter_info_<#= element.Key.Name #> = filters_by_infos
                .Where(f => f.PropertyName == FilterItem_<#= element.Key.Name #>.Id.RemoveFromEnd("_Filter"))
                .FirstOrDefault();
            if(filter_info_<#= element.Key.Name #> != null)
            {
                FilterItem_<#= element.Key.Name #>.Selected = filter_info_<#= element.Key.Name #>.Value;
            }

<# if (element.Value.FilterItem_Category == FilterItem_GAppComponent.FilterItem_Categories.Select) {#>
			var All_Data_<#= element.Key.Name #> = new <#= element.Key.PropertyType.Name #>BLO(this._UnitOfWork, this.GAppContext).FindAll();
			string All_<#= element.Key.Name #>_msg = string.Format("tous les {0}",msg_<#= entityType.Name #>.PluralName.ToLower());
            All_Data_<#= element.Key.Name #>.Insert(0, new <#= element.Key.PropertyType.Name #> { Id = 0, ToStringValue = All_<#= element.Key.Name #>_msg });
            FilterItem_<#= element.Key.Name #>.Data = All_Data_<#= element.Key.Name #>.ToDictionary(entity => entity.Id.ToString(), entity => entity.ToStringValue);
<# }#>
<# if (element.Value.FilterItem_Category == FilterItem_GAppComponent.FilterItem_Categories.Enum) {#>
            var All_Data_<#= element.Key.Name #> = GAppEnumLocalization.Get_IntValue_And_LocalValue<TaskStates>();
            FilterItem_<#= element.Key.Name #>.Data = All_Data_<#= element.Key.Name #>.ToDictionary(entity => entity.Key.ToString(), entity => entity.Value);
            FilterItem_<#= element.Key.Name #>.Data.Add("", string.Format("tous les {0}", typeof(TaskStates).GetProperty(nameof(TaskProject.TaskState))));
<# }#>
			index_page.Filter.FilterItems.Add(FilterItem_<#= element.Key.Name #>);

	    <# 
            }
		#>

            FilterItem_GAppComponent SeachFilter = new FilterItem_GAppComponent();
            SeachFilter.FilterItem_Category = FilterItem_GAppComponent.FilterItem_Categories.Search;
            SeachFilter.Label = "Recherche";
			SeachFilter.Selected = SearchBy;
            SeachFilter.Placeholder = SeachFilter.Label;
            index_page.Filter.FilterItems.Add(SeachFilter);

            // Selected Values
            var Filter_Items = DataTable_GAppComponent.ParseFilterBy(FilterBy);
        }
		#endregion

 
		public virtual ActionResult Index(FilterRequestParams filterRequestParams)
        {
            msgHelper.Index(msg);
            Int32 _TotalRecords = 0;
            List<string> SearchCreteria = this.GetSearchCreteria();

            List<<#= Controller_Code.Models.IndexModelType.Name #>> _List<#= Controller_Code.Models.IndexModelType.Name #> = null;
            try
            {
                filterRequestParams = this.Save_OR_Load_filterRequestParams_State(filterRequestParams);
               _List<#= Controller_Code.Models.IndexModelType.Name #> = new <#= Controller_Code.Models.IndexModelType.Name #>BLM(this._UnitOfWork, this.GAppContext)
                   .Find(filterRequestParams, SearchCreteria, out _TotalRecords);

            }
            catch (Exception ex)
            {
                filterRequestParams = new FilterRequestParams();
				this.Delete_filterRequestParams_State();
                _List<#= Controller_Code.Models.IndexModelType.Name #> = new <#= Controller_Code.Models.IndexModelType.Name #>BLM(this._UnitOfWork, this.GAppContext)
                  .Find(filterRequestParams, SearchCreteria, out _TotalRecords);
                Alert(ex.Message, NotificationType.warning);
            }

            Index_GAppPage index_page = new Index_GAppPage(filterRequestParams,this.Get_GAppDataTable_Header_Text_And_Ids(), _TotalRecords);
			index_page.Title = msg["Index_Title"];
			this.InitFilter(index_page, filterRequestParams.FilterBy, filterRequestParams.SearchBy);

            ViewBag.index_page = index_page;

            return View(_List<#= Controller_Code.Models.IndexModelType.Name #>);
        }


		protected virtual void Fill_ViewBag_Create(<#= Controller_Code.Models.CreateModelType.Name #> <#= Controller_Code.Models.CreateModelType.Name #>)
        {
<#  
	foreach(string foreignKey in Controller_Code.ForeignKeiesNames()) { 
		var foreignKeyId = foreignKey + "Id";
	
		// If the "CreateModelView" contraine the foreignKey
		if(Controller_Code.Models.CreateModelType.GetProperties().Where(p=>p.Name == foreignKeyId).FirstOrDefault() != null)
		{
		    var propertyInfo = Controller_Code.Models.EntityType.GetProperty(foreignKey);

		    // if the property not have a SelectFilter
			if(Controller_Code.Models.CreateModel.Properties.Get_All_SelectFilter().Keys.Select(p=>p.Name).ToList().Contains(foreignKeyId))
				continue;
#>
		ViewBag.<#= foreignKeyId #> = new SelectList(new <#= propertyInfo.PropertyType.Name #>BLO(this._UnitOfWork, this.GAppContext) .FindAll(), "Id", nameof(TrainingIS_BaseEntity.ToStringValue), <#= Controller_Code.Models.CreateModelType.Name #>.<#= foreignKeyId #>);
<#		}        
   } 		 	
#>

<# if(Controller_Code.Models.CreateModel.Properties.Get_All_CombBox().Count() > 0 ) {
#>			// ComboBoxes 
<#}
 foreach (var ComboBoxes in Controller_Code.Models.CreateModel.Properties.Get_All_CombBox())
{#>			ViewBag.<#= ComboBoxes.Key.Name #> = new SelectList(new <#= ComboBoxes.Value.DataFrom.Name #>BLO(this._UnitOfWork, this.GAppContext) .FindAll(), "Id", nameof(TrainingIS_BaseEntity.ToStringValue));
<#}#>

<# if(Controller_Code.Models.CreateModel.Properties.Get_All_SelectFilter().Count() > 0 ) {
#>			// Many 
<#} 

foreach (var ManyItem in Controller_Code.Models.CreateModel.Properties.Get_All_With_Many())		
{ 
			if(ManyItem.Value.TypeOfEntity == null) {
				 WriteLine("throw new Exception(\"a Many have a TypeOFEntity null\");");
				 continue;
            }
#>			ViewBag.Data_<#= ManyItem.Key.Name #> = new <#= ManyItem.Value.TypeOfEntity.Name #>BLO(this._UnitOfWork, this.GAppContext) .FindAll().ToList<BaseEntity>();
<#}#>

        }

		public virtual ActionResult Create()
        {
			msgHelper.Create(msg);		
			<#= Controller_Code.Models.CreateModelType.Name #> <#= Controller_Code.Models.CreateModelType.Name.ToLower() #> = new <#= Controller_Code.Models.CreateModelType.Name #>BLM(this._UnitOfWork, this.GAppContext) .CreateNew();
			this.Fill_ViewBag_Create(<#= Controller_Code.Models.CreateModelType.Name.ToLower() #>);
			return View(<#= Controller_Code.Models.CreateModelType.Name.ToLower() #>);
        } 

		[HttpPost] 
        [ValidateAntiForgeryToken]
		public virtual ActionResult Create(<#= Controller_Code.Models.CreateModelType.Name #> <#= Controller_Code.Models.CreateModelType.Name #>)
        {
			<#= entityType.Name #> <#= entityType.Name #> = null ;
			<#= entityType.Name #> = new <#= Controller_Code.Models.CreateModelType.Name #>BLM(this._UnitOfWork, this.GAppContext) 
										.ConverTo_<#= entityType.Name #>(<#= Controller_Code.Models.CreateModelType.Name #>);

			bool dataBaseException = false;
            if (ModelState.IsValid)
            {
				
				try
                {
                    <#= entityType.Name #>BLO.Save(<#= entityType.Name #>);
					Alert(string.Format(msgManager.The_Entity_was_well_created, msgHelper.DefinitArticle().FirstLetterToUpperCase(), msg_<#= entityType.Name #>.SingularName.ToLower(), <#= entityType.Name #>), NotificationType.success);
					return RedirectToAction("Index");
                }
                catch (GAppException ex)
                {
					dataBaseException = true;
                    Alert(ex.Message, NotificationType.error);
                }
            }
			if (!dataBaseException)
            {
                Alert(msgManager.The_information_you_have_entered_is_not_valid, NotificationType.warning);
            }
			msgHelper.Create(msg);
			this.Fill_ViewBag_Create(<#= Controller_Code.Models.CreateModelType.Name #>);
			<#= Controller_Code.Models.CreateModelType.Name #> = new <#= Controller_Code.Models.CreateModelType.Name #>BLM(this._UnitOfWork, this.GAppContext).ConverTo_<#= Controller_Code.Models.CreateModelType.Name #>(<#= entityType.Name #>);
			return View(<#= Controller_Code.Models.CreateModelType.Name #>);
        }

		protected virtual void Fill_Edit_ViewBag(<#= Controller_Code.Models.EditModelType.Name #> <#= Controller_Code.Models.EditModelType.Name #>)
        {
<#		foreach(string foreignKey in Controller_Code.ForeignKeiesNames()) { 

			var foreignKeyId = foreignKey + "Id";
			var propertyInfo = Controller_Code.Models.EntityType.GetProperty(foreignKey);

			// if the propertu not have a SelectFilter
			if(Controller_Code.Models.EditModel.Properties.Get_All_SelectFilter().Keys.Select(p=>p.Name).ToList().Contains(foreignKeyId))
				continue;

			if(Controller_Code.Models.EditModelType.GetProperties().Where(p=>p.Name == foreignKeyId).FirstOrDefault() != null)
			{
#>
			ViewBag.<#= foreignKeyId #> = new SelectList(new <#= propertyInfo.PropertyType.Name #>BLO(this._UnitOfWork, this.GAppContext) .FindAll(), "Id", nameof(TrainingIS_BaseEntity.ToStringValue), <#= Controller_Code.Models.EditModelType.Name #>.<#= foreignKeyId #>);
<#			}        
		} 			
#> 

<# if(Controller_Code.Models.EditModel.Properties.Get_All_CombBox().Count() > 0 ) {
#>			// ComboBoxes 
<#}
 foreach (var ComboBoxes in Controller_Code.Models.EditModel.Properties.Get_All_CombBox())
{#>			ViewBag.<#= ComboBoxes.Key.Name #> = new SelectList(new <#= ComboBoxes.Value.DataFrom.Name #>BLO(this._UnitOfWork, this.GAppContext) .FindAll(), "Id", nameof(TrainingIS_BaseEntity.ToStringValue));
<#}#>

<# if(Controller_Code.Models.CreateModel.Properties.Get_All_SelectFilter().Count() > 0 ) {
#>			// Many 
<#} 

foreach (var ManyItem in Controller_Code.Models.CreateModel.Properties.Get_All_With_Many())		
{ 
			if(ManyItem.Value.TypeOfEntity == null) {
				 WriteLine("throw new Exception(\"a Many have a TypeOFEntity null\");");
				 continue;
            }
#>			ViewBag.Data_<#= ManyItem.Key.Name #> = new <#= ManyItem.Value.TypeOfEntity.Name #>BLO(this._UnitOfWork, this.GAppContext) .FindAll().ToList<BaseEntity>();
<#}#>

        }
		 
		public virtual ActionResult Edit(long? id)
        {
			bool dataBaseException = false;
			msgHelper.Edit(msg);
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }

            <#= entityType.Name #> <#= entityType.Name #> = <#= entityType.Name #>BLO.FindBaseEntityByID((long)id);
            if (<#= entityType.Name #> == null)
            {
                string msg = string.Format(msgManager.You_try_to_edit_that_does_not_exist, msgHelper.UndefindedArticle(), msg_<#= entityType.Name #>.SingularName.ToLower());
                Alert(msg, NotificationType.error);
                return RedirectToAction("Index");
            }			 
			<#= Controller_Code.Models.EditModelType.Name #> <#= Controller_Code.Models.EditModelType.Name #> = new <#= Controller_Code.Models.EditModelType.Name #>BLM(this._UnitOfWork, this.GAppContext) 
                                                                .ConverTo_<#= Controller_Code.Models.EditModelType.Name #>(<#= entityType.Name #>) ;

			this.Fill_Edit_ViewBag(<#= Controller_Code.Models.EditModelType.Name #>);
			return View(<#= Controller_Code.Models.EditModelType.Name #>);
        }

		[HttpPost]
        [ValidateAntiForgeryToken]
		public virtual ActionResult Edit(<#= Controller_Code.Models.EditModelType.Name #> <#= Controller_Code.Models.EditModelType.Name #>)	
        {
			<#= entityType.Name #> <#= entityType.Name #> = new <#= Controller_Code.Models.EditModelType.Name #>BLM(this._UnitOfWork, this.GAppContext) 
                .ConverTo_<#= entityType.Name #>( <#= Controller_Code.Models.EditModelType.Name #>);

			bool dataBaseException = false;
            if (ModelState.IsValid)
            {
				

				try
                {
                    <#= entityType.Name #>BLO.Save(<#= entityType.Name #>);
					Alert(string.Format(msgManager.The_entity_has_been_changed,msgHelper.DefinitArticle().FirstLetterToUpperCase(), msg_<#= entityType.Name #>.SingularName.ToLower(), <#= entityType.Name #>), NotificationType.success);
					return RedirectToAction("Index");
                }
                catch (GAppException ex)
                {
					dataBaseException = true;
                    Alert(ex.Message, NotificationType.error);
                }
            }
			if (!dataBaseException) 
            {
                Alert(msgManager.The_information_you_have_entered_is_not_valid, NotificationType.warning);
            }
			msgHelper.Edit(msg);
			this.Fill_Edit_ViewBag(<#= Controller_Code.Models.EditModelType.Name #>);
			<#= Controller_Code.Models.EditModelType.Name #> = new <#= Controller_Code.Models.EditModelType.Name #>BLM(this._UnitOfWork, this.GAppContext).ConverTo_<#= Controller_Code.Models.EditModelType.Name #>(<#= entityType.Name #>);
			return View(<#= Controller_Code.Models.EditModelType.Name #>);
        }

		public virtual ActionResult Details(long? id)
        {
		    msgHelper.Details(msg);
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            <#= entityType.Name #> <#= entityType.Name #> = <#= entityType.Name #>BLO.FindBaseEntityByID((long) id);
            if (<#= entityType.Name #> == null)
            {
                string msg = string.Format(msgManager.You_try_to_show_that_does_not_exist, msgHelper.UndefindedArticle(), msg_<#= entityType.Name #>.SingularName.ToLower());
                Alert(msg, NotificationType.error);
                return RedirectToAction("Index");
            }
			<#= Controller_Code.Models.DetailsModelType.Name #> <#= Controller_Code.Models.DetailsModelType.Name #> = new <#= Controller_Code.Models.DetailsModelType.Name #>();
		    <#= Controller_Code.Models.DetailsModelType.Name #> = new <#= Controller_Code.Models.DetailsModelType.Name #>BLM(this._UnitOfWork, this.GAppContext) 
                .ConverTo_<#= Controller_Code.Models.DetailsModelType.Name #>(<#= entityType.Name #>);


			return View(<#= Controller_Code.Models.DetailsModelType.Name #>);
        } 

		 public virtual ActionResult Delete(long? id)
        {
			msgHelper.Delete(msg);
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }

            <#= entityType.Name #> <#= entityType.Name #> = <#= entityType.Name #>BLO.FindBaseEntityByID((long)id);
            if (<#= entityType.Name #> == null)
            {
			    string msg = string.Format(msgManager.You_try_to_delete_that_does_not_exist, msgHelper.UndefindedArticle(), msg_<#= entityType.Name #>.SingularName.ToLower());
                Alert(msg, NotificationType.error);
                return RedirectToAction("Index");
            }

			<#= Controller_Code.Models.DetailsModelType.Name #> <#= Controller_Code.Models.DetailsModelType.Name #> = new <#= Controller_Code.Models.DetailsModelType.Name #>BLM(this._UnitOfWork, this.GAppContext) 
							.ConverTo_<#= Controller_Code.Models.DetailsModelType.Name #>(<#= entityType.Name #>);


			 return View(<#= Controller_Code.Models.DetailsModelType.Name #>);

        }

        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public virtual ActionResult DeleteConfirmed(long id)
        {
			<#= entityType.Name #> <#= entityType.Name #> = <#= entityType.Name #>BLO.FindBaseEntityByID((long)id);
			if (<#= entityType.Name #> == null)
            {
			    string msg = string.Format(msgManager.You_try_to_delete_that_does_not_exist, msgHelper.UndefindedArticle(), msg_<#= entityType.Name #>.SingularName.ToLower());
                Alert(msg, NotificationType.error);
                return RedirectToAction("Index");
            }
            
			try
            {
                <#= entityType.Name #>BLO.Delete(<#= entityType.Name #>);
            }
            catch (GAppDbUpdate_ForeignKeyViolation_Exception ex)
            {
                string msg = string.Format(msgManager.You_can_not_delete_this_entity_because_it_is_already_related_to_another_object, <#= entityType.Name #>.ToString());
                Alert(msg, NotificationType.error);
                return RedirectToAction("Index");
            }
            catch (GAppException ex)
            {
                Alert(ex.Message, NotificationType.error);
                return RedirectToAction("Index");
            }

			Alert(string.Format(msgManager.The_entity_has_been_removed,msgHelper.DefinitArticle().FirstLetterToUpperCase(), msg_<#= entityType.Name #>.SingularName.ToLower(), <#= entityType.Name #>), NotificationType.success);
            return RedirectToAction("Index");
        }

		public virtual ActionResult Import()
        { 
			this.Create_Files_Directory_If_Not_Exist();
            string FileName = "Import_" + Guid.NewGuid().ToString() + ".xlsx";

            //Save excel file to the server
            HttpPostedFileBase postedFile = Request.Files["import_objects"];
            string path = Server.MapPath("~/Content/Files/" + FileName);
            postedFile.SaveAs(path);

            //Save to database
            var excelData = new ExcelData(path);
            DataTable firstTable = excelData.getFirstTable();
            try
            {
                ImportReport importReport = <#= entityType.Name #>BLO.Import(firstTable, FileName);

                // Save ExcelRepport file to Server
                DataSet DataSet_report = importReport.get_DataSet_Report();
                using (XLWorkbook wb = new XLWorkbook())
                {
                    wb.Worksheets.Add(DataSet_report);
                    string path_repport = ControllerContext.HttpContext.Server.MapPath("~/Content/Files/" + "Repport_" + FileName + ".xlsx");
                    Session["path_repport"] = path_repport;
					Session["repport_name"] = msg_<#= entityType.Name #>.PluralName;
                    wb.SaveAs(path_repport);

                    // Add DownLoad Link to Repport
                    string a_download = "<a href=\"/<#= entityType.Name.Pluralize() #>/LastRepportFile\">Télécharger le rapport d'importation</a>";
                    importReport.AddMessage(a_download, MessagesService.MessageTypes.Meta_msg);

                }

                // Show HTML Report
                Message(importReport.get_HTML_Report(), NotificationType.info);
            }
            catch (ImportException e)
            {
                Message(e.Message, NotificationType.error);
            }
            return RedirectToAction("Index");
        }
 
        public virtual FileResult Export()
        {
            using (XLWorkbook wb = new XLWorkbook())
            {
                DataTable dataTable = <#= entityType.Name #>BLO.Export();
                wb.Worksheets.Add(dataTable);
                using (MemoryStream stream = new MemoryStream())
                {
                    wb.SaveAs(stream);
					string FileName = string.Format("{0}-{1}", msg_<#= entityType.Name #>.PluralName, DateTime.Now.ToShortDateString());
                    return File(stream.ToArray(), "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", FileName + ".xlsx");
                }
            }
        }

		public virtual FileResult LastRepportFile()
        {
            // [Bug] if the user try to Import multiple data in the same time
            if (Session["path_repport"] != null)
            {
                string path = Session["path_repport"] as string;
				string name = Session["repport_name"] as string;

                var fileStream = new FileStream(path, FileMode.Open);
                string FileName = string.Format("Rapport d'import-{0}-{1}",name,DateTime.Now.ToShortDateString());
                return File(fileStream, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", FileName + ".xlsx");

            }
            return null;

        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                <#= entityType.Name #>BLO.Dispose();
            }
            base.Dispose(disposing);
        }
    }

	public partial class <#= entityType.Name.Pluralize() #>Controller : Base<#= entityType.Name.Pluralize() #>Controller{};
}

<#
} // for
manager.Process();
#>