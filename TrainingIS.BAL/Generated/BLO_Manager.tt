<#@ template language="C#" debug="true" hostspecific="true"#>
<#@ output extension=".cs"#>
<#@ include file="lib.ttinclude" #>
<#@ assembly name="EnvDte" #>  
<#            
	var AllProjects = VisualStudioHelper.GetAllProjects();
	// Current Project
    var CurrentProject = VisualStudioHelper.CurrentProject;
	var CurrentRootNamespace = CurrentProject.Properties.Item("RootNamespace").Value;

	// Project Entnties
	var EntitiesProject = AllProjects.Where(p => p.Name.Contains("Entities")).FirstOrDefault();

	// Find All Classes in Solution  ( Current project & project entnties )
	List<EnvDTE.CodeElement> All_Entities =new List<EnvDTE.CodeElement>();

	var allClasses_CurrentProject = new VsCodeModel(this.VisualStudioHelper)
					.GetAllCodeElementsOfType(
					CurrentProject.CodeModel.CodeElements, EnvDTE.vsCMElement.vsCMElementClass, false);

    // Add Current Project entities
	All_Entities
		.AddRange(
				allClasses_CurrentProject
					.Where(c=>c.FullName.Contains("Entities"))
					.Where(c=>! c.FullName.Contains("Resources"))  
					.Where(c=>! c.FullName.Contains("Entities.Base"))
					.Where(c=>! c.FullName.Contains("Entities.ModelsViews"))
					.ToList<EnvDTE.CodeElement>()
				);
	// Add Entities Project 
	if(EntitiesProject != null) {
	    var allClasses_EntitiesProject = new VsCodeModel(this.VisualStudioHelper).GetAllCodeElementsOfType(EntitiesProject.CodeModel.CodeElements, EnvDTE.vsCMElement.vsCMElementClass, false);
		All_Entities.AddRange(allClasses_EntitiesProject.Where(c=>c.FullName.Contains("Entities"))
					.Where(c=>! c.FullName.Contains("Resources"))  
					.Where(c=>! c.FullName.Contains("Entities.Base"))
					.Where(c=>! c.FullName.Contains("Entities.ModelsViews"))
					.ToList<EnvDTE.CodeElement>());
    }
#>
<#
	// Create file for All Entities
	var manager = TemplateFileManager.Create(this);
	manager.StartNewFile("BLO_Manager_Generated.cs");
    // Create DataBaseBackup partial class
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TrainingIS.BLL;
using TrainingIS.DAL;
using TrainingIS.Entities;

namespace TrainingIS.BLL
{
    public partial class BLO_Manager
    { 
		public BLO_Manager(UnitOfWork UnitOfWork)
        {
            this._UnitOfWork = UnitOfWork;
<# foreach(EnvDTE.CodeClass codeClass in All_Entities){#>
			BLO_Types[typeof(<#= codeClass.Name #>)] = typeof(<#= codeClass.Name #>BLO);
<#}#>
        }
   
<# foreach(EnvDTE.CodeClass codeClass in All_Entities){

   // EntityMetaDataConfiguratrion entityMetaDataConfiguratrion = EntityMetaDataConfiguratrion.CreateConfigEntity("TrainingIS.Entities." + codeClass.Name );
	//if(entityMetaDataConfiguratrion.entityMetataDataAttribute.isGenerateBLO){
#>
        private <#= codeClass.Name #>BLO _<#= codeClass.Name #>BLO;
        public <#= codeClass.Name #>BLO <#= codeClass.Name #>BLO
        {
            get
            {
                if (this._<#= codeClass.Name #>BLO == null)
                    this._<#= codeClass.Name #>BLO = new <#= codeClass.Name #>BLO(this._UnitOfWork);
                return _<#= codeClass.Name #>BLO;
            }
        }

<# // }
}
#>
    }
}



<#

manager.Process();
#>


