<#@ template language="C#" debug="true"   hostspecific="true"#>
<#@ CleanupBehavior processor="T4VSHost" CleanupAfterProcessingtemplate="true" #>  
<#@ output extension=".cs"#> 
<#@ include file="..\Lib\Imports.include.t4" #>
<#@ include file="..\Lib\lib.ttinclude" #> 
<#   
	// Create file for All Entities
	var manager = TemplateFileManager.Create(this);  
	

	List<Type> Entities = DataBaseBakupService<TrainingISModel>.GetEntitiesTypes();
	DataBaseBakupService<TrainingISModel> Generator = new DataBaseBakupService<TrainingISModel>(); 
	manager.StartNewFile(Generator.Code.FileName);

     
#>
using System.Data;
<# foreach(string namesapce in Generator.Code.Expcected_NameSpaces){ #>
using <#= namesapce #>;
<# } #>

namespace TrainingIS.BLL.Services
{
    public partial class <#= Generator.Code.ClassName #> 
    {
        public void AddDataTablesToDataSet(DataSet dataSet)
        {
<# 	foreach(Type entityType in Entities){  #>
            dataSet.Tables.Add(new <#= entityType.Name #>BLO(this.UnitOfWork, this.GAppContext).Export());
<#}#>
        }

		public string Import(DataSet dataSet)
        {
            string msg = "";
            foreach (DataTable table in dataSet.Tables)
            {
<# foreach(Type entityType in Entities){ #>
				if (table.TableName == msg_<#= entityType.Name #>.PluralName) {
                    msg += new <#= entityType.Name #>BLO(this.UnitOfWork, this.GAppContext).Import(table);
				}
<# } #>
            }
            return msg;
        }
    }
}
<#

manager.Process();
#>


