<#@ template language="C#" debug="true" hostspecific="true"#>
<#@ output extension=".cs"#>
<#@ include file="lib.ttinclude" #>
<#@ assembly name="GAppTemp\bin\Debug\GAppTemp.dll" #>
<#@ assembly name="TrainningIS.DAL\bin\Debug\TrainingIS.DAL.dll" #>
<#@ assembly name="TrainningIS.DAL\bin\Debug\EntityFramework.dll" #>
<#@ assembly name="TrainningIS.DAL\bin\Debug\EntityFramework.SqlServer.dll" #>
<#@ assembly name="TrainingIS.Entities\bin\Debug\TrainingIS.Entities.dll" #> 
<#@ import namespace="GApp.WebApp.Manager.Generator" #>
<#@ import namespace="System.Data.Entity" #>   
<#@ import namespace="TrainingIS.DAL" #>  
<#@ import namespace="GApp.WebApp.Manager.Views" #>
<#@ import namespace="TrainingIS.Entities.ModelsViews.Generated" #> 
<#       
	Dictionary<Type, List<Type>> ModelsViewsTypes = new DefaultModelView_MetaData().ModelsViewsTypes;
	ModelViewsService<TrainingISModel> _ModelViewsService = new ModelViewsService<TrainingISModel>(ModelsViewsTypes);
	Dictionary<Type, List<Type>> AllViewsModels = _ModelViewsService.getAllViewsModels(ModelsViewsTypes);

	// Create file for All Entities
	var manager = TemplateFileManager.Create(this);
#>
  
<#

	foreach (Type entityType in AllViewsModels.Keys)
    {
		ConvertoTo_CodeGenerator<TrainingISModel> ConvertoTo_CodeGenerator = new ConvertoTo_CodeGenerator<TrainingISModel>(entityType);
        foreach (Type viewModelType in AllViewsModels[entityType])
        {
			 string file_name_format = "{0}_{1}_BLM.cs";
			 manager.StartNewFile(string.Format(file_name_format,entityType.Name,viewModelType.Name));
			 

   
	   

#>
using System;
using System.Collections.Generic;
using System.Linq; 
using System.Text;
using System.Threading.Tasks;
using <#= viewModelType.Namespace #>;
using <#= entityType.Namespace #>;
using TrainingIS.DAL;
using GApp.Core.Utils;

namespace TrainingIS.BLL.ModelsViews
{
	public partial class Base<#= viewModelType.Name #>BLM : ViewModelBLM
    {
        
        public Base<#= viewModelType.Name #>BLM(UnitOfWork unitOfWork) :base(unitOfWork)
        {

        }

        public virtual <#=entityType.Name#> ConverTo_<#=entityType.Name#>(<#= viewModelType.Name #> <#= viewModelType.Name #>)
        {
			<#=entityType.Name#> <#=entityType.Name#> = null;
            if (<#= viewModelType.Name #>.Id != 0)
            {
                <#=entityType.Name#> = new <#=entityType.Name#>BLO(this.UnitOfWork).FindBaseEntityByID(<#= viewModelType.Name #>.Id);
            }
            else
            {
                <#=entityType.Name#> = new <#=entityType.Name#>();
            }
<# foreach (var viewModelProperty in viewModelType.GetProperties())
  { 
			        
				   string value_code = ConvertoTo_CodeGenerator.Search_Property_In_Object(entityType,viewModelProperty);
				   if(string.IsNullOrEmpty(value_code)) continue;
				   
	
#>
			<#=entityType.Name#>.<#=viewModelProperty.Name#> = <#= value_code#>;
<#
}
#>
            return <#=entityType.Name#>;
        }
        public virtual <#= viewModelType.Name #> ConverTo_<#= viewModelType.Name #>(<#=entityType.Name#> <#=entityType.Name#>)
        {  
            <#=viewModelType.Name#> <#=viewModelType.Name#> = new <#=viewModelType.Name#>();
<# foreach (var enityProperty in entityType.GetProperties())
             { 
			       
				   string value_code = ConvertoTo_CodeGenerator.Search_Property_In_Object(viewModelType,enityProperty);
				   if(string.IsNullOrEmpty(value_code)) continue;

#>
			<#=viewModelType.Name#>.<#=enityProperty.Name#> = <#=value_code#>;
<#
}
#>
            return <#=viewModelType.Name#>;            
        }
    }

	public partial class <#= viewModelType.Name #>BLM : Base<#= viewModelType.Name #>BLM
	{
		public <#= viewModelType.Name #>BLM(UnitOfWork unitOfWork) :base(unitOfWork) {

		}
	}
	 
}
<#
		}	// for model	 
} // for entty
manager.Process();
#>