<#@ template language="C#" debug="true"   hostspecific="true"#>
<#@ CleanupBehavior processor="T4VSHost" CleanupAfterProcessingtemplate="true" #>  
<#@ output extension=".cs"#> 
<#@ include file="..\Lib\Imports.include.t4" #>
<#@ include file="..\Lib\lib.ttinclude" #>  
<#   
	// Create file for All Entities
	var manager = TemplateFileManager.Create(this);  
	List<Type> Entities = EntityDAO_Code<TrainingISModel>.GetEntitiesTypes();
	foreach(Type entityType in Entities)
    {   
		EntityDAO_Code<TrainingISModel> EntityDAO_Code = new EntityDAO_Code<TrainingISModel>(entityType,new TrainingIS.Models.GAppDevContext()); 
		manager.StartNewFile(EntityDAO_Code.Code.FileName);
		 
#>using <#= entityType.Namespace #>;
using GApp.DAL; 
using System.Data.Entity;
using GApp.Entities;
namespace TrainingIS.DAL
{  
    public partial class <#= EntityDAO_Code.Code.ClassName #> : BaseDAO<<#= entityType.Name #>>{
        
		public <#= EntityDAO_Code.Code.ClassName #>(DbContext context) : base(context)
		{
			
        }

			public override int Insert(<#= entityType.Name #> item)
			{

				Check_if_reference_is_not_null(item);
				return base.Insert(item);
			}
			public override int Update(<#= entityType.Name #> item)
			{
				Check_if_reference_is_not_null(item);
				return base.Update(item);
			}

			protected void Check_if_reference_is_not_null(<#= entityType.Name #> item)
			{
				if (string.IsNullOrEmpty(item.Reference))
				{
					string msg = string.Format("The reference of the entity must not be empty or null", item);
					throw new GApp.DAL.Exceptions.GAppDbException(msg, new System.Exception());
				}
			}

   }
}
<# } 
manager.Process();
#>